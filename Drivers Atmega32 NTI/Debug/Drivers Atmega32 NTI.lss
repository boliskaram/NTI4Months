
Drivers Atmega32 NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000171d  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000839  00000000  00000000  00001e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bc0  00000000  00000000  00002682  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000118  00000000  00000000  00003244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000605  00000000  00000000  0000335c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b59  00000000  00000000  00003961  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000044ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  64:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ECUAL_PUSH_BUTTON_Init>:

	EN_BUTTON_STATUS_t buttonStatus = BUTTON_OK;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	
	DIO_Error = MCAL_DIO_Init_Pin(buttonPort,buttonPin,INPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
	
	if (DIO_Error == PORT_ERROR)
  72:	83 30       	cpi	r24, 0x03	; 3
  74:	29 f0       	breq	.+10     	; 0x80 <ECUAL_PUSH_BUTTON_Init+0x14>
	{
		buttonStatus = BUTTON_PORT_ERROR;
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	81 30       	cpi	r24, 0x01	; 1
  7a:	19 f0       	breq	.+6      	; 0x82 <ECUAL_PUSH_BUTTON_Init+0x16>
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <ECUAL_PUSH_BUTTON_Init+0x16>
  80:	92 e0       	ldi	r25, 0x02	; 2
	else{
		buttonStatus = BUTTON_OK;
	}
	
	return buttonStatus;
}
  82:	89 2f       	mov	r24, r25
  84:	08 95       	ret

00000086 <ECUAL_PUSH_BUTTON_Read>:
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	
	
	
	DIO_Error = MCAL_DIO_Read_Pin(buttonPort, buttonPin, pinValue);
  86:	0e 94 67 02 	call	0x4ce	; 0x4ce <MCAL_DIO_Read_Pin>
	
	if (DIO_Error == PORT_ERROR)
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	29 f0       	breq	.+10     	; 0x98 <ECUAL_PUSH_BUTTON_Read+0x12>
	{
		buttonStatus = BUTTON_PORT_ERROR;
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	19 f0       	breq	.+6      	; 0x9a <ECUAL_PUSH_BUTTON_Read+0x14>
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <ECUAL_PUSH_BUTTON_Read+0x14>
  98:	92 e0       	ldi	r25, 0x02	; 2
	else{
		buttonStatus = BUTTON_OK;
		
	}
	return buttonStatus ;
  9a:	89 2f       	mov	r24, r25
  9c:	08 95       	ret

0000009e <HAL_Seven_Segment_Init>:
 *  Author: Bolis
 */ 

#include "seven_segment.h"

void HAL_Seven_Segment_Init(EN_7Seg_Com_t Com){
  9e:	cf 93       	push	r28
  a0:	c8 2f       	mov	r28, r24
	
		MCAL_DIO_Init_Pin(PORT_B,PIN5,OUTPUT);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	65 e0       	ldi	r22, 0x05	; 5
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_B,PIN6,OUTPUT);
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	66 e0       	ldi	r22, 0x06	; 6
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_A,PIN2,OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_A,PIN3,OUTPUT);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		switch (Com)
  ca:	c2 30       	cpi	r28, 0x02	; 2
  cc:	09 f4       	brne	.+2      	; 0xd0 <HAL_Seven_Segment_Init+0x32>
  ce:	4b c0       	rjmp	.+150    	; 0x166 <HAL_Seven_Segment_Init+0xc8>
  d0:	30 f4       	brcc	.+12     	; 0xde <HAL_Seven_Segment_Init+0x40>
  d2:	cc 23       	and	r28, r28
  d4:	49 f0       	breq	.+18     	; 0xe8 <HAL_Seven_Segment_Init+0x4a>
  d6:	c1 30       	cpi	r28, 0x01	; 1
  d8:	09 f4       	brne	.+2      	; 0xdc <HAL_Seven_Segment_Init+0x3e>
  da:	5a c0       	rjmp	.+180    	; 0x190 <HAL_Seven_Segment_Init+0xf2>
  dc:	6d c0       	rjmp	.+218    	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
  de:	c3 30       	cpi	r28, 0x03	; 3
  e0:	c1 f0       	breq	.+48     	; 0x112 <HAL_Seven_Segment_Init+0x74>
  e2:	c4 30       	cpi	r28, 0x04	; 4
  e4:	59 f1       	breq	.+86     	; 0x13c <HAL_Seven_Segment_Init+0x9e>
  e6:	68 c0       	rjmp	.+208    	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
		{
		case ALL_COM:
			
			MCAL_DIO_Write_Pin(PORT_B,PIN5,LOW);
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_B,PIN6,LOW);
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	66 e0       	ldi	r22, 0x06	; 6
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN2,LOW);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	62 e0       	ldi	r22, 0x02	; 2
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN3,LOW);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			
			break;
 110:	53 c0       	rjmp	.+166    	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
		case COM3:
			MCAL_DIO_Write_Pin(PORT_B,PIN5,LOW);
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_B,PIN6,High);
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN2,High);
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN3,High);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			break;
 13a:	3e c0       	rjmp	.+124    	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
		case COM4:
			MCAL_DIO_Write_Pin(PORT_B,PIN5,High);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	65 e0       	ldi	r22, 0x05	; 5
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_B,PIN6,LOW);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN2,High);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN3,High);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			break;
 164:	29 c0       	rjmp	.+82     	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
		case COM2:
			MCAL_DIO_Write_Pin(PORT_B,PIN5,High);
 166:	41 e0       	ldi	r20, 0x01	; 1
 168:	65 e0       	ldi	r22, 0x05	; 5
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_B,PIN6,High);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	66 e0       	ldi	r22, 0x06	; 6
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN2,LOW);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN3,High);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			break;
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <HAL_Seven_Segment_Init+0x11a>
		case COM1:
			MCAL_DIO_Write_Pin(PORT_B,PIN5,High);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	65 e0       	ldi	r22, 0x05	; 5
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_B,PIN6,High);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN2,High);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	62 e0       	ldi	r22, 0x02	; 2
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			MCAL_DIO_Write_Pin(PORT_A,PIN3,LOW);
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_Write_Pin>
			break;
		default:
			break;
		}
		MCAL_DIO_Init_Pin(PORT_B,PIN5,OUTPUT);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_B,PIN6,OUTPUT);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	66 e0       	ldi	r22, 0x06	; 6
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_A,PIN2,OUTPUT);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_A,PIN3,OUTPUT);
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		
		MCAL_DIO_Init_Pin(PORT_B,PIN0,OUTPUT);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_B,PIN1,OUTPUT);
 1ea:	41 e0       	ldi	r20, 0x01	; 1
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_B,PIN2,OUTPUT);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
		MCAL_DIO_Init_Pin(PORT_B,PIN4,OUTPUT);
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	64 e0       	ldi	r22, 0x04	; 4
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 1e 01 	call	0x23c	; 0x23c <MCAL_DIO_Init_Pin>
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:
#include "HAL/seven_segment/seven_segment.h"
#include "HAL/Push_Button/push_button.h"
#include "MCAL/DIO/dio.h"

int main(void)
{
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
	HAL_Seven_Segment_Init(COM1);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 4f 00 	call	0x9e	; 0x9e <HAL_Seven_Segment_Init>
	
	ECUAL_PUSH_BUTTON_Init(PORT_D,PIN7);
 21c:	67 e0       	ldi	r22, 0x07	; 7
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 36 00 	call	0x6c	; 0x6c <ECUAL_PUSH_BUTTON_Init>
	
	u8_t buttonValue = LOW; 
 224:	19 82       	std	Y+1, r1	; 0x01
	EN_BUTTON_STATUS_t BUTTON_ERROR = BUTTON_OK ;	
	
	/* Replace with your application code */
    while (1) 
    {
		BUTTON_ERROR = ECUAL_PUSH_BUTTON_Read(PORT_D,PIN7,&buttonValue);
 226:	ae 01       	movw	r20, r28
 228:	4f 5f       	subi	r20, 0xFF	; 255
 22a:	5f 4f       	sbci	r21, 0xFF	; 255
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 43 00 	call	0x86	; 0x86 <ECUAL_PUSH_BUTTON_Read>
		if(buttonValue)	{
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	88 23       	and	r24, r24
 238:	b1 f3       	breq	.-20     	; 0x226 <main+0x1a>
 23a:	ff cf       	rjmp	.-2      	; 0x23a <main+0x2e>

0000023c <MCAL_DIO_Init_Pin>:
			errorStatus = PORT_ERROR;
			break;
	}
	return errorStatus;
	
}
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	59 f1       	breq	.+86     	; 0x296 <MCAL_DIO_Init_Pin+0x5a>
 240:	38 f0       	brcs	.+14     	; 0x250 <MCAL_DIO_Init_Pin+0x14>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	09 f4       	brne	.+2      	; 0x248 <MCAL_DIO_Init_Pin+0xc>
 246:	4a c0       	rjmp	.+148    	; 0x2dc <MCAL_DIO_Init_Pin+0xa0>
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	09 f4       	brne	.+2      	; 0x24e <MCAL_DIO_Init_Pin+0x12>
 24c:	6a c0       	rjmp	.+212    	; 0x322 <MCAL_DIO_Init_Pin+0xe6>
 24e:	8a c0       	rjmp	.+276    	; 0x364 <MCAL_DIO_Init_Pin+0x128>
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	79 f4       	brne	.+30     	; 0x272 <MCAL_DIO_Init_Pin+0x36>
 254:	68 30       	cpi	r22, 0x08	; 8
 256:	08 f0       	brcs	.+2      	; 0x25a <MCAL_DIO_Init_Pin+0x1e>
 258:	87 c0       	rjmp	.+270    	; 0x368 <MCAL_DIO_Init_Pin+0x12c>
 25a:	2a b3       	in	r18, 0x1a	; 26
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <MCAL_DIO_Init_Pin+0x2a>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <MCAL_DIO_Init_Pin+0x26>
 26a:	82 2b       	or	r24, r18
 26c:	8a bb       	out	0x1a, r24	; 26
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	08 95       	ret
 272:	41 11       	cpse	r20, r1
 274:	7b c0       	rjmp	.+246    	; 0x36c <MCAL_DIO_Init_Pin+0x130>
 276:	68 30       	cpi	r22, 0x08	; 8
 278:	08 f0       	brcs	.+2      	; 0x27c <MCAL_DIO_Init_Pin+0x40>
 27a:	7a c0       	rjmp	.+244    	; 0x370 <MCAL_DIO_Init_Pin+0x134>
 27c:	2a b3       	in	r18, 0x1a	; 26
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <MCAL_DIO_Init_Pin+0x4c>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <MCAL_DIO_Init_Pin+0x48>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	8a bb       	out	0x1a, r24	; 26
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	41 30       	cpi	r20, 0x01	; 1
 298:	79 f4       	brne	.+30     	; 0x2b8 <MCAL_DIO_Init_Pin+0x7c>
 29a:	68 30       	cpi	r22, 0x08	; 8
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <MCAL_DIO_Init_Pin+0x64>
 29e:	6a c0       	rjmp	.+212    	; 0x374 <MCAL_DIO_Init_Pin+0x138>
 2a0:	27 b3       	in	r18, 0x17	; 23
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <MCAL_DIO_Init_Pin+0x70>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <MCAL_DIO_Init_Pin+0x6c>
 2b0:	82 2b       	or	r24, r18
 2b2:	87 bb       	out	0x17, r24	; 23
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	41 11       	cpse	r20, r1
 2ba:	5e c0       	rjmp	.+188    	; 0x378 <MCAL_DIO_Init_Pin+0x13c>
 2bc:	68 30       	cpi	r22, 0x08	; 8
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <MCAL_DIO_Init_Pin+0x86>
 2c0:	5d c0       	rjmp	.+186    	; 0x37c <MCAL_DIO_Init_Pin+0x140>
 2c2:	27 b3       	in	r18, 0x17	; 23
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <MCAL_DIO_Init_Pin+0x92>
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	6a 95       	dec	r22
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <MCAL_DIO_Init_Pin+0x8e>
 2d2:	80 95       	com	r24
 2d4:	82 23       	and	r24, r18
 2d6:	87 bb       	out	0x17, r24	; 23
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	79 f4       	brne	.+30     	; 0x2fe <MCAL_DIO_Init_Pin+0xc2>
 2e0:	68 30       	cpi	r22, 0x08	; 8
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <MCAL_DIO_Init_Pin+0xaa>
 2e4:	4d c0       	rjmp	.+154    	; 0x380 <MCAL_DIO_Init_Pin+0x144>
 2e6:	24 b3       	in	r18, 0x14	; 20
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <MCAL_DIO_Init_Pin+0xb6>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <MCAL_DIO_Init_Pin+0xb2>
 2f6:	82 2b       	or	r24, r18
 2f8:	84 bb       	out	0x14, r24	; 20
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret
 2fe:	41 11       	cpse	r20, r1
 300:	41 c0       	rjmp	.+130    	; 0x384 <MCAL_DIO_Init_Pin+0x148>
 302:	68 30       	cpi	r22, 0x08	; 8
 304:	08 f0       	brcs	.+2      	; 0x308 <MCAL_DIO_Init_Pin+0xcc>
 306:	40 c0       	rjmp	.+128    	; 0x388 <MCAL_DIO_Init_Pin+0x14c>
 308:	24 b3       	in	r18, 0x14	; 20
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <MCAL_DIO_Init_Pin+0xd8>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <MCAL_DIO_Init_Pin+0xd4>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	84 bb       	out	0x14, r24	; 20
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	71 f4       	brne	.+28     	; 0x342 <MCAL_DIO_Init_Pin+0x106>
 326:	68 30       	cpi	r22, 0x08	; 8
 328:	88 f5       	brcc	.+98     	; 0x38c <MCAL_DIO_Init_Pin+0x150>
 32a:	21 b3       	in	r18, 0x11	; 17
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <MCAL_DIO_Init_Pin+0xfa>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <MCAL_DIO_Init_Pin+0xf6>
 33a:	82 2b       	or	r24, r18
 33c:	81 bb       	out	0x11, r24	; 17
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	41 11       	cpse	r20, r1
 344:	25 c0       	rjmp	.+74     	; 0x390 <MCAL_DIO_Init_Pin+0x154>
 346:	68 30       	cpi	r22, 0x08	; 8
 348:	28 f5       	brcc	.+74     	; 0x394 <MCAL_DIO_Init_Pin+0x158>
 34a:	21 b3       	in	r18, 0x11	; 17
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <MCAL_DIO_Init_Pin+0x11a>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <MCAL_DIO_Init_Pin+0x116>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	81 bb       	out	0x11, r24	; 17
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	08 95       	ret
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	08 95       	ret
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	08 95       	ret
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	08 95       	ret
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	08 95       	ret
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	08 95       	ret
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	08 95       	ret

00000398 <MCAL_DIO_Write_Pin>:
EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
	
	switch(portName){
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	41 f1       	breq	.+80     	; 0x3ec <MCAL_DIO_Write_Pin+0x54>
 39c:	38 f0       	brcs	.+14     	; 0x3ac <MCAL_DIO_Write_Pin+0x14>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <MCAL_DIO_Write_Pin+0xc>
 3a2:	44 c0       	rjmp	.+136    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	09 f4       	brne	.+2      	; 0x3aa <MCAL_DIO_Write_Pin+0x12>
 3a8:	61 c0       	rjmp	.+194    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 3aa:	7f c0       	rjmp	.+254    	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
 3ac:	68 30       	cpi	r22, 0x08	; 8
 3ae:	08 f0       	brcs	.+2      	; 0x3b2 <MCAL_DIO_Write_Pin+0x1a>
 3b0:	7e c0       	rjmp	.+252    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
			if(pinValue==High){
 3b2:	41 30       	cpi	r20, 0x01	; 1
 3b4:	61 f4       	brne	.+24     	; 0x3ce <MCAL_DIO_Write_Pin+0x36>
				SET_BIT(PORTA,pinNumber);
 3b6:	2b b3       	in	r18, 0x1b	; 27
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <MCAL_DIO_Write_Pin+0x2a>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <MCAL_DIO_Write_Pin+0x26>
 3c6:	82 2b       	or	r24, r18
 3c8:	8b bb       	out	0x1b, r24	; 27
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
	switch(portName){
		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
			if(pinValue==High){
				SET_BIT(PORTA,pinNumber);
				}else if(pinValue==LOW){
 3ce:	41 11       	cpse	r20, r1
 3d0:	70 c0       	rjmp	.+224    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
				RESET_BIT(PORTA,pinNumber);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <MCAL_DIO_Write_Pin+0x46>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <MCAL_DIO_Write_Pin+0x42>
 3e2:	80 95       	com	r24
 3e4:	82 23       	and	r24, r18
 3e6:	8b bb       	out	0x1b, r24	; 27
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
 3ec:	68 30       	cpi	r22, 0x08	; 8
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <MCAL_DIO_Write_Pin+0x5a>
 3f0:	62 c0       	rjmp	.+196    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
			if(pinValue==High){
 3f2:	41 30       	cpi	r20, 0x01	; 1
 3f4:	61 f4       	brne	.+24     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				SET_BIT(PORTB,pinNumber);
 3f6:	28 b3       	in	r18, 0x18	; 24
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <MCAL_DIO_Write_Pin+0x66>
 406:	82 2b       	or	r24, r18
 408:	88 bb       	out	0x18, r24	; 24
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
			if(pinValue==High){
				SET_BIT(PORTB,pinNumber);
				}else if(pinValue==LOW){
 40e:	41 11       	cpse	r20, r1
 410:	54 c0       	rjmp	.+168    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
				RESET_BIT(PORTB,pinNumber);
 412:	28 b3       	in	r18, 0x18	; 24
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	80 95       	com	r24
 424:	82 23       	and	r24, r18
 426:	88 bb       	out	0x18, r24	; 24
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
 42c:	68 30       	cpi	r22, 0x08	; 8
 42e:	08 f0       	brcs	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	46 c0       	rjmp	.+140    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
			if(pinValue==High){
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	61 f4       	brne	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				SET_BIT(PORTC,pinNumber);
 436:	25 b3       	in	r18, 0x15	; 21
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	82 2b       	or	r24, r18
 448:	85 bb       	out	0x15, r24	; 21
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
			if(pinValue==High){
				SET_BIT(PORTC,pinNumber);
				}else if(pinValue==LOW){
 44e:	41 11       	cpse	r20, r1
 450:	38 c0       	rjmp	.+112    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
				RESET_BIT(PORTC,pinNumber);
 452:	25 b3       	in	r18, 0x15	; 21
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	80 95       	com	r24
 464:	82 23       	and	r24, r18
 466:	85 bb       	out	0x15, r24	; 21
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
 46c:	68 30       	cpi	r22, 0x08	; 8
 46e:	58 f5       	brcc	.+86     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			if(pinValue==High){
 470:	41 30       	cpi	r20, 0x01	; 1
 472:	61 f4       	brne	.+24     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
				SET_BIT(PORTD,pinNumber);
 474:	22 b3       	in	r18, 0x12	; 18
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	82 2b       	or	r24, r18
 486:	82 bb       	out	0x12, r24	; 18
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
			if(pinValue==High){
				SET_BIT(PORTD,pinNumber);
				}else if(pinValue==LOW){
 48c:	41 11       	cpse	r20, r1
 48e:	1d c0       	rjmp	.+58     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				RESET_BIT(PORTD,pinNumber);
 490:	22 b3       	in	r18, 0x12	; 18
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	82 bb       	out	0x12, r24	; 18
}

EN_DIO_STATUS_t MCAL_DIO_Write_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber, EN_pinValue_t pinValue){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		default:
		errorStatus =PORT_ERROR;
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	08 95       	ret
				}else{
				errorStatus = VALUE_ERROR;
			}
			
			}else{
			errorStatus = PIN_ERROR;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
			if(pinValue==High){
				SET_BIT(PORTA,pinNumber);
				}else if(pinValue==LOW){
				RESET_BIT(PORTA,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
 4b2:	84 e0       	ldi	r24, 0x04	; 4
 4b4:	08 95       	ret
				RESET_BIT(PORTB,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
			}
			}else{
			errorStatus = PIN_ERROR;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	08 95       	ret
			if(pinValue==High){
				SET_BIT(PORTB,pinNumber);
				}else if(pinValue==LOW){
				RESET_BIT(PORTB,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	08 95       	ret
				RESET_BIT(PORTC,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
			}
			}else{
			errorStatus = PIN_ERROR;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	08 95       	ret
			if(pinValue==High){
				SET_BIT(PORTC,pinNumber);
				}else if(pinValue==LOW){
				RESET_BIT(PORTC,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
 4c2:	84 e0       	ldi	r24, 0x04	; 4
 4c4:	08 95       	ret
				RESET_BIT(PORTD,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
			}
			}else{
			errorStatus = PIN_ERROR;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	08 95       	ret
			if(pinValue==High){
				SET_BIT(PORTD,pinNumber);
				}else if(pinValue==LOW){
				RESET_BIT(PORTD,pinNumber);
				}else{
				errorStatus = VALUE_ERROR;
 4ca:	84 e0       	ldi	r24, 0x04	; 4
		default:
		errorStatus =PORT_ERROR;
		break;
	}
	return errorStatus;
}
 4cc:	08 95       	ret

000004ce <MCAL_DIO_Read_Pin>:

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber,u8_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
	
	switch(portName){
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	f9 f0       	breq	.+62     	; 0x510 <MCAL_DIO_Read_Pin+0x42>
 4d2:	30 f0       	brcs	.+12     	; 0x4e0 <MCAL_DIO_Read_Pin+0x12>
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	a1 f1       	breq	.+104    	; 0x540 <MCAL_DIO_Read_Pin+0x72>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	09 f4       	brne	.+2      	; 0x4de <MCAL_DIO_Read_Pin+0x10>
 4dc:	48 c0       	rjmp	.+144    	; 0x56e <MCAL_DIO_Read_Pin+0xa0>
 4de:	5e c0       	rjmp	.+188    	; 0x59c <MCAL_DIO_Read_Pin+0xce>

		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
 4e0:	68 30       	cpi	r22, 0x08	; 8
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <MCAL_DIO_Read_Pin+0x18>
 4e4:	5d c0       	rjmp	.+186    	; 0x5a0 <MCAL_DIO_Read_Pin+0xd2>
			*pinValue = READ_BIT(PINA,pinNumber);
 4e6:	29 b3       	in	r18, 0x19	; 25
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	06 2e       	mov	r0, r22
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <MCAL_DIO_Read_Pin+0x26>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <MCAL_DIO_Read_Pin+0x22>
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	82 23       	and	r24, r18
 4fc:	93 23       	and	r25, r19
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <MCAL_DIO_Read_Pin+0x36>
 500:	95 95       	asr	r25
 502:	87 95       	ror	r24
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <MCAL_DIO_Read_Pin+0x32>
 508:	fa 01       	movw	r30, r20
 50a:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber,u8_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
 510:	68 30       	cpi	r22, 0x08	; 8
 512:	08 f0       	brcs	.+2      	; 0x516 <MCAL_DIO_Read_Pin+0x48>
 514:	47 c0       	rjmp	.+142    	; 0x5a4 <MCAL_DIO_Read_Pin+0xd6>
			*pinValue = READ_BIT(PINB,pinNumber);
 516:	26 b3       	in	r18, 0x16	; 22
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	06 2e       	mov	r0, r22
 51e:	02 c0       	rjmp	.+4      	; 0x524 <MCAL_DIO_Read_Pin+0x56>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <MCAL_DIO_Read_Pin+0x52>
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	82 23       	and	r24, r18
 52c:	93 23       	and	r25, r19
 52e:	02 c0       	rjmp	.+4      	; 0x534 <MCAL_DIO_Read_Pin+0x66>
 530:	95 95       	asr	r25
 532:	87 95       	ror	r24
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <MCAL_DIO_Read_Pin+0x62>
 538:	fa 01       	movw	r30, r20
 53a:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber,u8_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
 540:	68 30       	cpi	r22, 0x08	; 8
 542:	90 f5       	brcc	.+100    	; 0x5a8 <MCAL_DIO_Read_Pin+0xda>
			*pinValue = READ_BIT(PINC,pinNumber);
 544:	23 b3       	in	r18, 0x13	; 19
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	06 2e       	mov	r0, r22
 54c:	02 c0       	rjmp	.+4      	; 0x552 <MCAL_DIO_Read_Pin+0x84>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	0a 94       	dec	r0
 554:	e2 f7       	brpl	.-8      	; 0x54e <MCAL_DIO_Read_Pin+0x80>
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	82 23       	and	r24, r18
 55a:	93 23       	and	r25, r19
 55c:	02 c0       	rjmp	.+4      	; 0x562 <MCAL_DIO_Read_Pin+0x94>
 55e:	95 95       	asr	r25
 560:	87 95       	ror	r24
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <MCAL_DIO_Read_Pin+0x90>
 566:	fa 01       	movw	r30, r20
 568:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber,u8_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
 56e:	68 30       	cpi	r22, 0x08	; 8
 570:	e8 f4       	brcc	.+58     	; 0x5ac <MCAL_DIO_Read_Pin+0xde>
			*pinValue = READ_BIT(PIND,pinNumber);
 572:	20 b3       	in	r18, 0x10	; 16
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	06 2e       	mov	r0, r22
 57a:	02 c0       	rjmp	.+4      	; 0x580 <MCAL_DIO_Read_Pin+0xb2>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <MCAL_DIO_Read_Pin+0xae>
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	82 23       	and	r24, r18
 588:	93 23       	and	r25, r19
 58a:	02 c0       	rjmp	.+4      	; 0x590 <MCAL_DIO_Read_Pin+0xc2>
 58c:	95 95       	asr	r25
 58e:	87 95       	ror	r24
 590:	6a 95       	dec	r22
 592:	e2 f7       	brpl	.-8      	; 0x58c <MCAL_DIO_Read_Pin+0xbe>
 594:	fa 01       	movw	r30, r20
 596:	80 83       	st	Z, r24
	return errorStatus;
}

EN_DIO_STATUS_t MCAL_DIO_Read_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber,u8_t* pinValue){
	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret
			}else{
			errorStatus = PIN_ERROR;
		}
		break;
		default:
		errorStatus =PORT_ERROR;
 59c:	83 e0       	ldi	r24, 0x03	; 3
 59e:	08 95       	ret

		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
			*pinValue = READ_BIT(PINA,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	08 95       	ret
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
			*pinValue = READ_BIT(PINB,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	08 95       	ret
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
			*pinValue = READ_BIT(PINC,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
			*pinValue = READ_BIT(PIND,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
		default:
		errorStatus =PORT_ERROR;
		break;
	}
	return errorStatus;
}
 5ae:	08 95       	ret

000005b0 <_exit>:
 5b0:	f8 94       	cli

000005b2 <__stop_program>:
 5b2:	ff cf       	rjmp	.-2      	; 0x5b2 <__stop_program>
