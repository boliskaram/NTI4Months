
Drivers Atmega32 NTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000ed6  00000f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  00000f70  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bec  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c14  00000000  00000000  00002d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001121  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b3  00000000  00000000  00004e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001370  00000000  00000000  000056ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_1>
   8:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_2>
   c:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  8a:	0c 94 69 07 	jmp	0xed2	; 0xed2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_led_callback>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	83 ec       	ldi	r24, 0xC3	; 195
  96:	99 e0       	ldi	r25, 0x09	; 9
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <toggle_led_callback+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <toggle_led_callback+0x10>
  a2:	00 00       	nop

void toggle_led_callback(){
	_delay_ms(200);
	static int counterINT = 1 ;
	static int flag = 0;
	HAL_LCD_clear_screen();
  a4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <HAL_LCD_clear_screen>
	HAL_LED_Toggle(PORT_A,PIN4);
  a8:	64 e0       	ldi	r22, 0x04	; 4
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 ab 01 	call	0x356	; 0x356 <HAL_LED_Toggle>
	
	if(flag == 0){
  b0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
  b4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f4       	brne	.+32     	; 0xdc <toggle_led_callback+0x4a>
		HAL_LCD_Write_Number(counterINT);
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  c4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <HAL_LCD_Write_Number>
		counterINT++;
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  da:	0f c0       	rjmp	.+30     	; 0xfa <toggle_led_callback+0x68>
	}else{
		HAL_LCD_Write_Number(counterINT);
  dc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  e0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  e4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <HAL_LCD_Write_Number>
		counterINT--;
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	
	if(counterINT==10){
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  fe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 102:	8a 30       	cpi	r24, 0x0A	; 10
 104:	91 05       	cpc	r25, r1
 106:	39 f4       	brne	.+14     	; 0x116 <toggle_led_callback+0x84>
		flag = 1 ;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 110:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 114:	08 95       	ret
		
	}
	else if(counterINT == 1){
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	21 f4       	brne	.+8      	; 0x122 <toggle_led_callback+0x90>
		flag = 0;
 11a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
 11e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 122:	08 95       	ret

00000124 <Toggle_LED_Count_Init>:
	}
}

void Toggle_LED_Count_Init(){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	00 d0       	rcall	.+0      	; 0x12a <Toggle_LED_Count_Init+0x6>
 12a:	00 d0       	rcall	.+0      	; 0x12c <Toggle_LED_Count_Init+0x8>
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
	
	HAL_LED_Init(PORT_A,PIN4);
 130:	64 e0       	ldi	r22, 0x04	; 4
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LED_Init>
	HAL_LCD_Init();
 138:	0e 94 15 01 	call	0x22a	; 0x22a <HAL_LCD_Init>
	
	ST_EXTI_Config_t EXTI_CFG ;
	EXTI_CFG.EXTI_NAME = INT_1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	89 83       	std	Y+1, r24	; 0x01
	EXTI_CFG.EXTI_MODE = RISING_EDGE_MODE ;
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	8a 83       	std	Y+2, r24	; 0x02
	EXTI_CFG.P_IRQ_CallBack = toggle_led_callback ;
 144:	89 e4       	ldi	r24, 0x49	; 73
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	9c 83       	std	Y+4, r25	; 0x04
 14a:	8b 83       	std	Y+3, r24	; 0x03
	MCAL_EXTI_Init(&EXTI_CFG);
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	0e 94 4f 03 	call	0x69e	; 0x69e <MCAL_EXTI_Init>
	
}
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <Toggle_LED_Count_Update>:

void Toggle_LED_Count_Update(){
 162:	08 95       	ret

00000164 <LCD_send_pulse_for_update_data_cmd>:
			HAL_LCD_Write_cmd(LCD_BEGIN_AT_THIRD_RAW + position);
		}
	}
	else if(line == 4){
		if( 20 > position && position >= 0){
			HAL_LCD_Write_cmd(LCD_BEGIN_AT_FOURTH_RAW + position);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	62 e0       	ldi	r22, 0x02	; 2
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_send_pulse_for_update_data_cmd+0xe>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_send_pulse_for_update_data_cmd+0x14>
 178:	00 00       	nop
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_send_pulse_for_update_data_cmd+0x24>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_send_pulse_for_update_data_cmd+0x2a>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <lcd_write>:
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
 196:	84 fb       	bst	r24, 4
 198:	44 27       	eor	r20, r20
 19a:	40 f9       	bld	r20, 0
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1a4:	c5 fb       	bst	r28, 5
 1a6:	44 27       	eor	r20, r20
 1a8:	40 f9       	bld	r20, 0
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1b2:	c6 fb       	bst	r28, 6
 1b4:	44 27       	eor	r20, r20
 1b6:	40 f9       	bld	r20, 0
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1c0:	4c 2f       	mov	r20, r28
 1c2:	44 1f       	adc	r20, r20
 1c4:	44 27       	eor	r20, r20
 1c6:	44 1f       	adc	r20, r20
 1c8:	64 e0       	ldi	r22, 0x04	; 4
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1d0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_send_pulse_for_update_data_cmd>
 1d4:	4c 2f       	mov	r20, r28
 1d6:	41 70       	andi	r20, 0x01	; 1
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1e0:	c1 fb       	bst	r28, 1
 1e2:	44 27       	eor	r20, r20
 1e4:	40 f9       	bld	r20, 0
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1ee:	c2 fb       	bst	r28, 2
 1f0:	44 27       	eor	r20, r20
 1f2:	40 f9       	bld	r20, 0
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 1fc:	c3 fb       	bst	r28, 3
 1fe:	44 27       	eor	r20, r20
 200:	40 f9       	bld	r20, 0
 202:	64 e0       	ldi	r22, 0x04	; 4
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 20a:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_send_pulse_for_update_data_cmd>
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <HAL_LCD_Write_cmd>:
 212:	cf 93       	push	r28
 214:	c8 2f       	mov	r28, r24
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <HAL_LCD_Init>:
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	63 e0       	ldi	r22, 0x03	; 3
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	64 e0       	ldi	r22, 0x04	; 4
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	86 e7       	ldi	r24, 0x76	; 118
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <HAL_LCD_Init+0x42>
 274:	00 c0       	rjmp	.+0      	; 0x276 <HAL_LCD_Init+0x4c>
 276:	00 00       	nop
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 28a:	8c e0       	ldi	r24, 0x0C	; 12
 28c:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 290:	8f e9       	ldi	r24, 0x9F	; 159
 292:	9f e0       	ldi	r25, 0x0F	; 15
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <HAL_LCD_Init+0x6a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <HAL_LCD_Init+0x70>
 29a:	00 00       	nop
 29c:	86 e0       	ldi	r24, 0x06	; 6
 29e:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 2a2:	08 95       	ret

000002a4 <HAL_LCD_clear_screen>:
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 09 01 	call	0x212	; 0x212 <HAL_LCD_Write_cmd>
 2aa:	08 95       	ret

000002ac <HAL_LCD_Write_char>:
void HAL_LCD_Write_cmd(uint8_t cmd){
	MCAL_DIO_Write_Pin(Control_Port , RS_Pin,LOW);
	lcd_write(cmd);
}

void HAL_LCD_Write_char(uint8_t data){
 2ac:	cf 93       	push	r28
 2ae:	c8 2f       	mov	r28, r24
	MCAL_DIO_Write_Pin(Control_Port , RS_Pin,High);
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <MCAL_DIO_Write_Pin>
	lcd_write(data);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_write>
}
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <HAL_LCD_Write_string>:

void HAL_LCD_Write_string(char* x){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	for(int i = 0; x[i] != '\0'; i++)
 2ca:	88 81       	ld	r24, Y
 2cc:	88 23       	and	r24, r24
 2ce:	31 f0       	breq	.+12     	; 0x2dc <HAL_LCD_Write_string+0x18>
 2d0:	21 96       	adiw	r28, 0x01	; 1
	HAL_LCD_Write_char(x[i]);
 2d2:	0e 94 56 01 	call	0x2ac	; 0x2ac <HAL_LCD_Write_char>
	MCAL_DIO_Write_Pin(Control_Port , RS_Pin,High);
	lcd_write(data);
}

void HAL_LCD_Write_string(char* x){
	for(int i = 0; x[i] != '\0'; i++)
 2d6:	89 91       	ld	r24, Y+
 2d8:	81 11       	cpse	r24, r1
 2da:	fb cf       	rjmp	.-10     	; 0x2d2 <HAL_LCD_Write_string+0xe>
	HAL_LCD_Write_char(x[i]);
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <HAL_LCD_Write_Number>:
			HAL_LCD_Write_cmd(LCD_BEGIN_AT_FOURTH_RAW + position);
		}
	}
}

void HAL_LCD_Write_Number (int Number){
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	27 97       	sbiw	r28, 0x07	; 7
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
	char str[7];
	sprintf(str,"%d",Number);	// Adjust the formatting to your liking.
 2fa:	9f 93       	push	r25
 2fc:	8f 93       	push	r24
 2fe:	82 e6       	ldi	r24, 0x62	; 98
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	8e 01       	movw	r16, r28
 308:	0f 5f       	subi	r16, 0xFF	; 255
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
 30c:	1f 93       	push	r17
 30e:	0f 93       	push	r16
 310:	0e 94 7f 04 	call	0x8fe	; 0x8fe <sprintf>
	HAL_LCD_Write_string(str) ;
 314:	c8 01       	movw	r24, r16
 316:	0e 94 62 01 	call	0x2c4	; 0x2c4 <HAL_LCD_Write_string>

}
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	27 96       	adiw	r28, 0x07	; 7
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <HAL_LED_Init>:
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
}
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	21 f0       	breq	.+8      	; 0x34e <HAL_LED_Init+0x12>
 346:	83 30       	cpi	r24, 0x03	; 3
 348:	21 f0       	breq	.+8      	; 0x352 <HAL_LED_Init+0x16>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	08 95       	ret

00000356 <HAL_LED_Toggle>:
EN_LED_STATUS_t HAL_LED_Toggle(EN_portName_t LED_Port,EN_pinNumber_t LED_Pin){
	
	EN_LED_STATUS_t errorStatus = LED_OK ;
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	DIO_Error = MCAL_DIO_Toggle_Pin(LED_Port,LED_Pin);
 356:	0e 94 05 03 	call	0x60a	; 0x60a <MCAL_DIO_Toggle_Pin>

	if(DIO_Error == PIN_ERROR){
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	21 f0       	breq	.+8      	; 0x366 <HAL_LED_Toggle+0x10>
		errorStatus = LED_PIN_ERROR ;
		}else if(DIO_Error == PORT_ERROR){
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	21 f0       	breq	.+8      	; 0x36a <HAL_LED_Toggle+0x14>
		errorStatus = LED_PORT_ERROR ;
		}else{
		errorStatus = LED_OK ;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
	EN_DIO_STATUS_t DIO_Error = DIO_OK ;
	
	DIO_Error = MCAL_DIO_Toggle_Pin(LED_Port,LED_Pin);

	if(DIO_Error == PIN_ERROR){
		errorStatus = LED_PIN_ERROR ;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
		}else if(DIO_Error == PORT_ERROR){
		errorStatus = LED_PORT_ERROR ;
 36a:	82 e0       	ldi	r24, 0x02	; 2
		}else{
		errorStatus = LED_OK ;
	}
	return errorStatus ;
 36c:	08 95       	ret

0000036e <main>:
	
	//Task 7
	//Display_Name_Init();
	
	//task 8
	Toggle_LED_Count_Init();
 36e:	0e 94 92 00 	call	0x124	; 0x124 <Toggle_LED_Count_Init>
		
		//Task 7
		//Display_Name_Update();
		
		//task 8
		Toggle_LED_Count_Update();
 372:	0e 94 b1 00 	call	0x162	; 0x162 <Toggle_LED_Count_Update>
 376:	fd cf       	rjmp	.-6      	; 0x372 <main+0x4>

00000378 <MCAL_DIO_Init_Pin>:
		default:
		errorStatus =PORT_ERROR;
		break;
	}
	return errorStatus;
}
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	59 f1       	breq	.+86     	; 0x3d2 <MCAL_DIO_Init_Pin+0x5a>
 37c:	38 f0       	brcs	.+14     	; 0x38c <MCAL_DIO_Init_Pin+0x14>
 37e:	82 30       	cpi	r24, 0x02	; 2
 380:	09 f4       	brne	.+2      	; 0x384 <MCAL_DIO_Init_Pin+0xc>
 382:	4a c0       	rjmp	.+148    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	09 f4       	brne	.+2      	; 0x38a <MCAL_DIO_Init_Pin+0x12>
 388:	6a c0       	rjmp	.+212    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 38a:	8a c0       	rjmp	.+276    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	79 f4       	brne	.+30     	; 0x3ae <MCAL_DIO_Init_Pin+0x36>
 390:	68 30       	cpi	r22, 0x08	; 8
 392:	08 f0       	brcs	.+2      	; 0x396 <MCAL_DIO_Init_Pin+0x1e>
 394:	87 c0       	rjmp	.+270    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 396:	2a b3       	in	r18, 0x1a	; 26
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <MCAL_DIO_Init_Pin+0x2a>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <MCAL_DIO_Init_Pin+0x26>
 3a6:	82 2b       	or	r24, r18
 3a8:	8a bb       	out	0x1a, r24	; 26
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 3ae:	41 11       	cpse	r20, r1
 3b0:	7b c0       	rjmp	.+246    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 3b2:	68 30       	cpi	r22, 0x08	; 8
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <MCAL_DIO_Init_Pin+0x40>
 3b6:	7a c0       	rjmp	.+244    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 3b8:	2a b3       	in	r18, 0x1a	; 26
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <MCAL_DIO_Init_Pin+0x4c>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <MCAL_DIO_Init_Pin+0x48>
 3c8:	80 95       	com	r24
 3ca:	82 23       	and	r24, r18
 3cc:	8a bb       	out	0x1a, r24	; 26
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	41 30       	cpi	r20, 0x01	; 1
 3d4:	79 f4       	brne	.+30     	; 0x3f4 <MCAL_DIO_Init_Pin+0x7c>
 3d6:	68 30       	cpi	r22, 0x08	; 8
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <MCAL_DIO_Init_Pin+0x64>
 3da:	6a c0       	rjmp	.+212    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 3dc:	27 b3       	in	r18, 0x17	; 23
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <MCAL_DIO_Init_Pin+0x70>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <MCAL_DIO_Init_Pin+0x6c>
 3ec:	82 2b       	or	r24, r18
 3ee:	87 bb       	out	0x17, r24	; 23
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
 3f4:	41 11       	cpse	r20, r1
 3f6:	5e c0       	rjmp	.+188    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 3f8:	68 30       	cpi	r22, 0x08	; 8
 3fa:	08 f0       	brcs	.+2      	; 0x3fe <MCAL_DIO_Init_Pin+0x86>
 3fc:	5d c0       	rjmp	.+186    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3fe:	27 b3       	in	r18, 0x17	; 23
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	82 23       	and	r24, r18
 412:	87 bb       	out	0x17, r24	; 23
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	08 95       	ret
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	79 f4       	brne	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	68 30       	cpi	r22, 0x08	; 8
 41e:	08 f0       	brcs	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	4d c0       	rjmp	.+154    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 422:	24 b3       	in	r18, 0x14	; 20
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	84 bb       	out	0x14, r24	; 20
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
 43a:	41 11       	cpse	r20, r1
 43c:	41 c0       	rjmp	.+130    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 43e:	68 30       	cpi	r22, 0x08	; 8
 440:	08 f0       	brcs	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	40 c0       	rjmp	.+128    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 444:	24 b3       	in	r18, 0x14	; 20
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	80 95       	com	r24
 456:	82 23       	and	r24, r18
 458:	84 bb       	out	0x14, r24	; 20
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret
 45e:	41 30       	cpi	r20, 0x01	; 1
 460:	71 f4       	brne	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 462:	68 30       	cpi	r22, 0x08	; 8
 464:	88 f5       	brcc	.+98     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 466:	21 b3       	in	r18, 0x11	; 17
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	6a 95       	dec	r22
 474:	e2 f7       	brpl	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 476:	82 2b       	or	r24, r18
 478:	81 bb       	out	0x11, r24	; 17
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	08 95       	ret
 47e:	41 11       	cpse	r20, r1
 480:	25 c0       	rjmp	.+74     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 482:	68 30       	cpi	r22, 0x08	; 8
 484:	28 f5       	brcc	.+74     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 486:	21 b3       	in	r18, 0x11	; 17
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	81 bb       	out	0x11, r24	; 17
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	08 95       	ret
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	08 95       	ret
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	08 95       	ret
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	08 95       	ret
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	08 95       	ret
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 95       	ret
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	08 95       	ret
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	08 95       	ret
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	08 95       	ret
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	08 95       	ret
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	08 95       	ret
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret

000004d4 <MCAL_DIO_Write_Pin>:
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	41 f1       	breq	.+80     	; 0x528 <MCAL_DIO_Write_Pin+0x54>
 4d8:	38 f0       	brcs	.+14     	; 0x4e8 <MCAL_DIO_Write_Pin+0x14>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <MCAL_DIO_Write_Pin+0xc>
 4de:	44 c0       	rjmp	.+136    	; 0x568 <MCAL_DIO_Write_Pin+0x94>
 4e0:	83 30       	cpi	r24, 0x03	; 3
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <MCAL_DIO_Write_Pin+0x12>
 4e4:	61 c0       	rjmp	.+194    	; 0x5a8 <MCAL_DIO_Write_Pin+0xd4>
 4e6:	7f c0       	rjmp	.+254    	; 0x5e6 <MCAL_DIO_Write_Pin+0x112>
 4e8:	68 30       	cpi	r22, 0x08	; 8
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <MCAL_DIO_Write_Pin+0x1a>
 4ec:	7e c0       	rjmp	.+252    	; 0x5ea <MCAL_DIO_Write_Pin+0x116>
 4ee:	41 30       	cpi	r20, 0x01	; 1
 4f0:	61 f4       	brne	.+24     	; 0x50a <MCAL_DIO_Write_Pin+0x36>
 4f2:	2b b3       	in	r18, 0x1b	; 27
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <MCAL_DIO_Write_Pin+0x2a>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <MCAL_DIO_Write_Pin+0x26>
 502:	82 2b       	or	r24, r18
 504:	8b bb       	out	0x1b, r24	; 27
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	08 95       	ret
 50a:	41 11       	cpse	r20, r1
 50c:	70 c0       	rjmp	.+224    	; 0x5ee <MCAL_DIO_Write_Pin+0x11a>
 50e:	2b b3       	in	r18, 0x1b	; 27
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <MCAL_DIO_Write_Pin+0x46>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	6a 95       	dec	r22
 51c:	e2 f7       	brpl	.-8      	; 0x516 <MCAL_DIO_Write_Pin+0x42>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	8b bb       	out	0x1b, r24	; 27
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	08 95       	ret
 528:	68 30       	cpi	r22, 0x08	; 8
 52a:	08 f0       	brcs	.+2      	; 0x52e <MCAL_DIO_Write_Pin+0x5a>
 52c:	62 c0       	rjmp	.+196    	; 0x5f2 <MCAL_DIO_Write_Pin+0x11e>
 52e:	41 30       	cpi	r20, 0x01	; 1
 530:	61 f4       	brne	.+24     	; 0x54a <MCAL_DIO_Write_Pin+0x76>
 532:	28 b3       	in	r18, 0x18	; 24
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <MCAL_DIO_Write_Pin+0x6a>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <MCAL_DIO_Write_Pin+0x66>
 542:	82 2b       	or	r24, r18
 544:	88 bb       	out	0x18, r24	; 24
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
 54a:	41 11       	cpse	r20, r1
 54c:	54 c0       	rjmp	.+168    	; 0x5f6 <MCAL_DIO_Write_Pin+0x122>
 54e:	28 b3       	in	r18, 0x18	; 24
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <MCAL_DIO_Write_Pin+0x86>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <MCAL_DIO_Write_Pin+0x82>
 55e:	80 95       	com	r24
 560:	82 23       	and	r24, r18
 562:	88 bb       	out	0x18, r24	; 24
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	08 95       	ret
 568:	68 30       	cpi	r22, 0x08	; 8
 56a:	08 f0       	brcs	.+2      	; 0x56e <MCAL_DIO_Write_Pin+0x9a>
 56c:	46 c0       	rjmp	.+140    	; 0x5fa <MCAL_DIO_Write_Pin+0x126>
 56e:	41 30       	cpi	r20, 0x01	; 1
 570:	61 f4       	brne	.+24     	; 0x58a <MCAL_DIO_Write_Pin+0xb6>
 572:	25 b3       	in	r18, 0x15	; 21
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <MCAL_DIO_Write_Pin+0xaa>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <MCAL_DIO_Write_Pin+0xa6>
 582:	82 2b       	or	r24, r18
 584:	85 bb       	out	0x15, r24	; 21
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	08 95       	ret
 58a:	41 11       	cpse	r20, r1
 58c:	38 c0       	rjmp	.+112    	; 0x5fe <MCAL_DIO_Write_Pin+0x12a>
 58e:	25 b3       	in	r18, 0x15	; 21
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <MCAL_DIO_Write_Pin+0xc6>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <MCAL_DIO_Write_Pin+0xc2>
 59e:	80 95       	com	r24
 5a0:	82 23       	and	r24, r18
 5a2:	85 bb       	out	0x15, r24	; 21
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	68 30       	cpi	r22, 0x08	; 8
 5aa:	58 f5       	brcc	.+86     	; 0x602 <MCAL_DIO_Write_Pin+0x12e>
 5ac:	41 30       	cpi	r20, 0x01	; 1
 5ae:	61 f4       	brne	.+24     	; 0x5c8 <MCAL_DIO_Write_Pin+0xf4>
 5b0:	22 b3       	in	r18, 0x12	; 18
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <MCAL_DIO_Write_Pin+0xe8>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <MCAL_DIO_Write_Pin+0xe4>
 5c0:	82 2b       	or	r24, r18
 5c2:	82 bb       	out	0x12, r24	; 18
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret
 5c8:	41 11       	cpse	r20, r1
 5ca:	1d c0       	rjmp	.+58     	; 0x606 <MCAL_DIO_Write_Pin+0x132>
 5cc:	22 b3       	in	r18, 0x12	; 18
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <MCAL_DIO_Write_Pin+0x104>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <MCAL_DIO_Write_Pin+0x100>
 5dc:	80 95       	com	r24
 5de:	82 23       	and	r24, r18
 5e0:	82 bb       	out	0x12, r24	; 18
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	08 95       	ret
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	84 e0       	ldi	r24, 0x04	; 4
 5f0:	08 95       	ret
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	08 95       	ret
 5f6:	84 e0       	ldi	r24, 0x04	; 4
 5f8:	08 95       	ret
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	08 95       	ret
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	08 95       	ret
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	08 95       	ret

0000060a <MCAL_DIO_Toggle_Pin>:
EN_DIO_STATUS_t MCAL_DIO_Toggle_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
	
	switch(portName){
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	a1 f0       	breq	.+40     	; 0x636 <MCAL_DIO_Toggle_Pin+0x2c>
 60e:	28 f0       	brcs	.+10     	; 0x61a <MCAL_DIO_Toggle_Pin+0x10>
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	f9 f0       	breq	.+62     	; 0x652 <MCAL_DIO_Toggle_Pin+0x48>
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	59 f1       	breq	.+86     	; 0x66e <MCAL_DIO_Toggle_Pin+0x64>
 618:	38 c0       	rjmp	.+112    	; 0x68a <MCAL_DIO_Toggle_Pin+0x80>
		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
 61a:	68 30       	cpi	r22, 0x08	; 8
 61c:	c0 f5       	brcc	.+112    	; 0x68e <MCAL_DIO_Toggle_Pin+0x84>
			TOGGLE_BIT(PORTA,pinNumber);
 61e:	2b b3       	in	r18, 0x1b	; 27
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <MCAL_DIO_Toggle_Pin+0x20>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <MCAL_DIO_Toggle_Pin+0x1c>
 62e:	82 27       	eor	r24, r18
 630:	8b bb       	out	0x1b, r24	; 27
}

EN_DIO_STATUS_t MCAL_DIO_Toggle_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
 636:	68 30       	cpi	r22, 0x08	; 8
 638:	60 f5       	brcc	.+88     	; 0x692 <MCAL_DIO_Toggle_Pin+0x88>
			TOGGLE_BIT(PORTB,pinNumber);
 63a:	28 b3       	in	r18, 0x18	; 24
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <MCAL_DIO_Toggle_Pin+0x3c>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <MCAL_DIO_Toggle_Pin+0x38>
 64a:	82 27       	eor	r24, r18
 64c:	88 bb       	out	0x18, r24	; 24
}

EN_DIO_STATUS_t MCAL_DIO_Toggle_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
 652:	68 30       	cpi	r22, 0x08	; 8
 654:	00 f5       	brcc	.+64     	; 0x696 <MCAL_DIO_Toggle_Pin+0x8c>
			TOGGLE_BIT(PORTC,pinNumber);
 656:	25 b3       	in	r18, 0x15	; 21
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <MCAL_DIO_Toggle_Pin+0x58>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <MCAL_DIO_Toggle_Pin+0x54>
 666:	82 27       	eor	r24, r18
 668:	85 bb       	out	0x15, r24	; 21
}

EN_DIO_STATUS_t MCAL_DIO_Toggle_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
 66e:	68 30       	cpi	r22, 0x08	; 8
 670:	a0 f4       	brcc	.+40     	; 0x69a <MCAL_DIO_Toggle_Pin+0x90>
			TOGGLE_BIT(PORTD,pinNumber);
 672:	22 b3       	in	r18, 0x12	; 18
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <MCAL_DIO_Toggle_Pin+0x74>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <MCAL_DIO_Toggle_Pin+0x70>
 682:	82 27       	eor	r24, r18
 684:	82 bb       	out	0x12, r24	; 18
}

EN_DIO_STATUS_t MCAL_DIO_Toggle_Pin(EN_portName_t portName, EN_pinNumber_t pinNumber){

	
	EN_DIO_STATUS_t errorStatus = DIO_OK;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	08 95       	ret
			errorStatus = PIN_ERROR;
		}
		break;
		
		default:
		errorStatus =PORT_ERROR;
 68a:	83 e0       	ldi	r24, 0x03	; 3
 68c:	08 95       	ret
	switch(portName){
		case PORT_A:
		if(pinNumber >=0 && pinNumber <=7 ){
			TOGGLE_BIT(PORTA,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	08 95       	ret
		
		case PORT_B:
		if(pinNumber >=0 && pinNumber <=7 ){
			TOGGLE_BIT(PORTB,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	08 95       	ret
		
		case PORT_C:
		if(pinNumber >=0 && pinNumber <=7 ){
			TOGGLE_BIT(PORTC,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	08 95       	ret
		
		case PORT_D:
		if(pinNumber >=0 && pinNumber <=7 ){
			TOGGLE_BIT(PORTD,pinNumber);
			}else{
			errorStatus = PIN_ERROR;
 69a:	81 e0       	ldi	r24, 0x01	; 1
		errorStatus =PORT_ERROR;
		break;
	}
	return errorStatus;
	
 69c:	08 95       	ret

0000069e <MCAL_EXTI_Init>:
	return errorStatus ;
}



EN_EXTI_STATUS_t MCAL_EXTI_Init(ST_EXTI_Config_t* EXTI_config){
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	ec 01       	movw	r28, r24
	
	EN_EXTI_STATUS_t EXTI_ERROR_STATUS = EXTI_OK ;
	
	MCAL_Global_Interrupt_Enable();
 6a4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <MCAL_Global_Interrupt_Enable>
	//SET_BIT(SREG , Global_Interrupt_BIT);
	
	if(EXTI_config->EXTI_NAME == INT_0)
 6a8:	88 81       	ld	r24, Y
 6aa:	81 11       	cpse	r24, r1
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <MCAL_EXTI_Init+0x1c>
	{
		MCAL_DIO_Init_Pin(INT0PROT,INT0PIN,INPUT);
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 6b8:	8f c0       	rjmp	.+286    	; 0x7d8 <MCAL_EXTI_Init+0x13a>
	}
	else if (EXTI_config->EXTI_NAME == INT_1)
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	31 f4       	brne	.+12     	; 0x6ca <MCAL_EXTI_Init+0x2c>
	{
		MCAL_DIO_Init_Pin(INT1PROT,INT1PIN,INPUT);
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	63 e0       	ldi	r22, 0x03	; 3
 6c2:	83 e0       	ldi	r24, 0x03	; 3
 6c4:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 6c8:	87 c0       	rjmp	.+270    	; 0x7d8 <MCAL_EXTI_Init+0x13a>
	}
	else if (EXTI_config->EXTI_NAME == INT_2)
 6ca:	82 30       	cpi	r24, 0x02	; 2
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <MCAL_EXTI_Init+0x32>
 6ce:	76 c0       	rjmp	.+236    	; 0x7bc <MCAL_EXTI_Init+0x11e>
	{
		MCAL_DIO_Init_Pin(INT2PROT,INT2PIN,INPUT);
 6d0:	40 e0       	ldi	r20, 0x00	; 0
 6d2:	62 e0       	ldi	r22, 0x02	; 2
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	0e 94 bc 01 	call	0x378	; 0x378 <MCAL_DIO_Init_Pin>
 6da:	7e c0       	rjmp	.+252    	; 0x7d8 <MCAL_EXTI_Init+0x13a>
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;

	if (EXTI_MODE_config->EXTI_NAME == INT_0)
	{
		if (EXTI_MODE_config->EXTI_MODE == LOW_LEVEL_MODE)
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	81 11       	cpse	r24, r1
 6e0:	07 c0       	rjmp	.+14     	; 0x6f0 <MCAL_EXTI_Init+0x52>
		{
			RESET_BIT(MCUCR,MCUCR_ISC00);
 6e2:	85 b7       	in	r24, 0x35	; 53
 6e4:	8e 7f       	andi	r24, 0xFE	; 254
 6e6:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,MCUCR_ISC01);
 6e8:	85 b7       	in	r24, 0x35	; 53
 6ea:	8d 7f       	andi	r24, 0xFD	; 253
 6ec:	85 bf       	out	0x35, r24	; 53
 6ee:	79 c0       	rjmp	.+242    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == LOGICAL_CHANGE_MODE)
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	39 f4       	brne	.+14     	; 0x702 <MCAL_EXTI_Init+0x64>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
 6f4:	85 b7       	in	r24, 0x35	; 53
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,MCUCR_ISC01);
 6fa:	85 b7       	in	r24, 0x35	; 53
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	85 bf       	out	0x35, r24	; 53
 700:	70 c0       	rjmp	.+224    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == FALLING_EDGE_MODE)
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	39 f4       	brne	.+14     	; 0x714 <MCAL_EXTI_Init+0x76>
		{
			RESET_BIT(MCUCR,MCUCR_ISC00);
 706:	85 b7       	in	r24, 0x35	; 53
 708:	8e 7f       	andi	r24, 0xFE	; 254
 70a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
 70c:	85 b7       	in	r24, 0x35	; 53
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	85 bf       	out	0x35, r24	; 53
 712:	67 c0       	rjmp	.+206    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	09 f0       	breq	.+2      	; 0x71a <MCAL_EXTI_Init+0x7c>
 718:	68 c0       	rjmp	.+208    	; 0x7ea <MCAL_EXTI_Init+0x14c>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
 71a:	85 b7       	in	r24, 0x35	; 53
 71c:	81 60       	ori	r24, 0x01	; 1
 71e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC01);
 720:	85 b7       	in	r24, 0x35	; 53
 722:	82 60       	ori	r24, 0x02	; 2
 724:	85 bf       	out	0x35, r24	; 53
 726:	5d c0       	rjmp	.+186    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		else{
			errorStatus = EXTI_MODE_ERROR;
		}
	}
	
	else if (EXTI_MODE_config->EXTI_NAME == INT_1)
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	31 f5       	brne	.+76     	; 0x778 <MCAL_EXTI_Init+0xda>
	{
		if (EXTI_MODE_config->EXTI_MODE == LOW_LEVEL_MODE)
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	81 11       	cpse	r24, r1
 730:	07 c0       	rjmp	.+14     	; 0x740 <MCAL_EXTI_Init+0xa2>
		{
			RESET_BIT(MCUCR,MCUCR_ISC10);
 732:	85 b7       	in	r24, 0x35	; 53
 734:	8b 7f       	andi	r24, 0xFB	; 251
 736:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,MCUCR_ISC11);
 738:	85 b7       	in	r24, 0x35	; 53
 73a:	87 7f       	andi	r24, 0xF7	; 247
 73c:	85 bf       	out	0x35, r24	; 53
 73e:	51 c0       	rjmp	.+162    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == LOGICAL_CHANGE_MODE)
 740:	81 30       	cpi	r24, 0x01	; 1
 742:	39 f4       	brne	.+14     	; 0x752 <MCAL_EXTI_Init+0xb4>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
 744:	85 b7       	in	r24, 0x35	; 53
 746:	84 60       	ori	r24, 0x04	; 4
 748:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR,MCUCR_ISC11);
 74a:	85 b7       	in	r24, 0x35	; 53
 74c:	87 7f       	andi	r24, 0xF7	; 247
 74e:	85 bf       	out	0x35, r24	; 53
 750:	48 c0       	rjmp	.+144    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == FALLING_EDGE_MODE)
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	39 f4       	brne	.+14     	; 0x764 <MCAL_EXTI_Init+0xc6>
		{
			RESET_BIT(MCUCR,MCUCR_ISC10);
 756:	85 b7       	in	r24, 0x35	; 53
 758:	8b 7f       	andi	r24, 0xFB	; 251
 75a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
 75c:	85 b7       	in	r24, 0x35	; 53
 75e:	88 60       	ori	r24, 0x08	; 8
 760:	85 bf       	out	0x35, r24	; 53
 762:	3f c0       	rjmp	.+126    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	09 f0       	breq	.+2      	; 0x76a <MCAL_EXTI_Init+0xcc>
 768:	42 c0       	rjmp	.+132    	; 0x7ee <MCAL_EXTI_Init+0x150>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
 76a:	85 b7       	in	r24, 0x35	; 53
 76c:	84 60       	ori	r24, 0x04	; 4
 76e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,MCUCR_ISC11);
 770:	85 b7       	in	r24, 0x35	; 53
 772:	88 60       	ori	r24, 0x08	; 8
 774:	85 bf       	out	0x35, r24	; 53
 776:	35 c0       	rjmp	.+106    	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
		}
	}
	else if (EXTI_MODE_config->EXTI_NAME == INT_2)
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	d9 f5       	brne	.+118    	; 0x7f2 <MCAL_EXTI_Init+0x154>
	{
	
		if (EXTI_MODE_config->EXTI_MODE == FALLING_EDGE_MODE)
 77c:	89 81       	ldd	r24, Y+1	; 0x01
 77e:	82 30       	cpi	r24, 0x02	; 2
 780:	21 f4       	brne	.+8      	; 0x78a <MCAL_EXTI_Init+0xec>
		{
			RESET_BIT(MCUCSR,MCUCR_ISC2);
 782:	84 b7       	in	r24, 0x34	; 52
 784:	8f 7b       	andi	r24, 0xBF	; 191
 786:	84 bf       	out	0x34, r24	; 52
 788:	2c c0       	rjmp	.+88     	; 0x7e2 <MCAL_EXTI_Init+0x144>
		}
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
 78a:	83 30       	cpi	r24, 0x03	; 3
 78c:	a1 f5       	brne	.+104    	; 0x7f6 <MCAL_EXTI_Init+0x158>
		{
			SET_BIT(MCUCSR,MCUCR_ISC2);
 78e:	84 b7       	in	r24, 0x34	; 52
 790:	80 64       	ori	r24, 0x40	; 64
 792:	84 bf       	out	0x34, r24	; 52
 794:	26 c0       	rjmp	.+76     	; 0x7e2 <MCAL_EXTI_Init+0x144>
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_config->EXTI_NAME == INT_0)
	{
		SET_BIT(GICR,INT0_Enable_BIT);
 796:	8b b7       	in	r24, 0x3b	; 59
 798:	80 64       	ori	r24, 0x40	; 64
 79a:	8b bf       	out	0x3b, r24	; 59
	
}

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	11 c0       	rjmp	.+34     	; 0x7c2 <MCAL_EXTI_Init+0x124>
	
	if (EXTI_config->EXTI_NAME == INT_0)
	{
		SET_BIT(GICR,INT0_Enable_BIT);
	}
	else if (EXTI_config->EXTI_NAME == INT_1)
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	29 f4       	brne	.+10     	; 0x7ae <MCAL_EXTI_Init+0x110>
	{
		SET_BIT(GICR,INT1_Enable_BIT);
 7a4:	8b b7       	in	r24, 0x3b	; 59
 7a6:	80 68       	ori	r24, 0x80	; 128
 7a8:	8b bf       	out	0x3b, r24	; 59
	
}

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <MCAL_EXTI_Init+0x124>
	}
	else if (EXTI_config->EXTI_NAME == INT_1)
	{
		SET_BIT(GICR,INT1_Enable_BIT);
	}
	else if (EXTI_config->EXTI_NAME == INT_2)
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	39 f4       	brne	.+14     	; 0x7c0 <MCAL_EXTI_Init+0x122>
	{
		SET_BIT(GICR,INT2_Enable_BIT);
 7b2:	8b b7       	in	r24, 0x3b	; 59
 7b4:	80 62       	ori	r24, 0x20	; 32
 7b6:	8b bf       	out	0x3b, r24	; 59
	
}

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <MCAL_EXTI_Init+0x124>
	{
		MCAL_DIO_Init_Pin(INT2PROT,INT2PIN,INPUT);
	}
	else
	{
		EXTI_ERROR_STATUS = EXTI_NAME_ERROR ;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	01 c0       	rjmp	.+2      	; 0x7c2 <MCAL_EXTI_Init+0x124>
	{
		SET_BIT(GICR,INT2_Enable_BIT);
	}
	else
	{
		errorStatus = EXTI_NAME_ERROR;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
		{
			EXTI_ERROR_STATUS = MCAL_EXTI_Enable(EXTI_config);
		}
	}
	
	GP_EXTI_callback[EXTI_config->EXTI_NAME] = EXTI_config->P_IRQ_CallBack;
 7c2:	2a 81       	ldd	r18, Y+2	; 0x02
 7c4:	3b 81       	ldd	r19, Y+3	; 0x03
 7c6:	e8 81       	ld	r30, Y
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	ee 0f       	add	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	e8 59       	subi	r30, 0x98	; 152
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	31 83       	std	Z+1, r19	; 0x01
 7d4:	20 83       	st	Z, r18
	
	return EXTI_ERROR_STATUS ;
 7d6:	11 c0       	rjmp	.+34     	; 0x7fa <MCAL_EXTI_Init+0x15c>

static EN_EXTI_STATUS_t MCAL_EXTI_MODE(ST_EXTI_Config_t* EXTI_MODE_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;

	if (EXTI_MODE_config->EXTI_NAME == INT_0)
 7d8:	88 81       	ld	r24, Y
 7da:	88 23       	and	r24, r24
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <MCAL_EXTI_Init+0x142>
 7de:	7e cf       	rjmp	.-260    	; 0x6dc <MCAL_EXTI_Init+0x3e>
 7e0:	a3 cf       	rjmp	.-186    	; 0x728 <MCAL_EXTI_Init+0x8a>

static EN_EXTI_STATUS_t MCAL_EXTI_Enable(ST_EXTI_Config_t* EXTI_config)
{
	EN_EXTI_STATUS_t errorStatus = EXTI_OK ;
	
	if (EXTI_config->EXTI_NAME == INT_0)
 7e2:	88 81       	ld	r24, Y
 7e4:	81 11       	cpse	r24, r1
 7e6:	dc cf       	rjmp	.-72     	; 0x7a0 <MCAL_EXTI_Init+0x102>
 7e8:	d6 cf       	rjmp	.-84     	; 0x796 <MCAL_EXTI_Init+0xf8>
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
			SET_BIT(MCUCR,MCUCR_ISC01);
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	ea cf       	rjmp	.-44     	; 0x7c2 <MCAL_EXTI_Init+0x124>
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
			SET_BIT(MCUCR,MCUCR_ISC11);
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
 7ee:	82 e0       	ldi	r24, 0x02	; 2
 7f0:	e8 cf       	rjmp	.-48     	; 0x7c2 <MCAL_EXTI_Init+0x124>
		else{
			errorStatus = EXTI_MODE_ERROR;
		}
	}
	else{
		errorStatus = EXTI_NAME_ERROR;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	e6 cf       	rjmp	.-52     	; 0x7c2 <MCAL_EXTI_Init+0x124>
		else if (EXTI_MODE_config->EXTI_MODE == RISING_EDGE_MODE)
		{
			SET_BIT(MCUCSR,MCUCR_ISC2);
		}
		else{
			errorStatus = EXTI_MODE_ERROR;
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	e4 cf       	rjmp	.-56     	; 0x7c2 <MCAL_EXTI_Init+0x124>
	}
	
	GP_EXTI_callback[EXTI_config->EXTI_NAME] = EXTI_config->P_IRQ_CallBack;
	
	return EXTI_ERROR_STATUS ;
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <__vector_1>:

void __vector_1(void) __attribute__((signal,used));
void __vector_1(void){
 800:	1f 92       	push	r1
 802:	0f 92       	push	r0
 804:	0f b6       	in	r0, 0x3f	; 63
 806:	0f 92       	push	r0
 808:	11 24       	eor	r1, r1
 80a:	2f 93       	push	r18
 80c:	3f 93       	push	r19
 80e:	4f 93       	push	r20
 810:	5f 93       	push	r21
 812:	6f 93       	push	r22
 814:	7f 93       	push	r23
 816:	8f 93       	push	r24
 818:	9f 93       	push	r25
 81a:	af 93       	push	r26
 81c:	bf 93       	push	r27
 81e:	ef 93       	push	r30
 820:	ff 93       	push	r31
	if(GP_EXTI_callback[0] != NULL){
 822:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GP_EXTI_callback>
 826:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GP_EXTI_callback+0x1>
 82a:	30 97       	sbiw	r30, 0x00	; 0
 82c:	09 f0       	breq	.+2      	; 0x830 <__vector_1+0x30>
		GP_EXTI_callback[0]();
 82e:	09 95       	icall
	}
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_2>:

void __vector_2(void) __attribute__((signal,used));
void __vector_2(void){
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
	if(GP_EXTI_callback[1] != NULL){
 874:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <GP_EXTI_callback+0x2>
 878:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <GP_EXTI_callback+0x3>
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
		GP_EXTI_callback[1]();
 880:	09 95       	icall
	}
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_3>:


void __vector_3(void) __attribute__((signal,used));
void __vector_3(void){
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
	if(GP_EXTI_callback[2] != NULL){
 8c6:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <GP_EXTI_callback+0x4>
 8ca:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <GP_EXTI_callback+0x5>
 8ce:	30 97       	sbiw	r30, 0x00	; 0
 8d0:	09 f0       	breq	.+2      	; 0x8d4 <__vector_3+0x30>
		GP_EXTI_callback[2]();
 8d2:	09 95       	icall
	}
 8d4:	ff 91       	pop	r31
 8d6:	ef 91       	pop	r30
 8d8:	bf 91       	pop	r27
 8da:	af 91       	pop	r26
 8dc:	9f 91       	pop	r25
 8de:	8f 91       	pop	r24
 8e0:	7f 91       	pop	r23
 8e2:	6f 91       	pop	r22
 8e4:	5f 91       	pop	r21
 8e6:	4f 91       	pop	r20
 8e8:	3f 91       	pop	r19
 8ea:	2f 91       	pop	r18
 8ec:	0f 90       	pop	r0
 8ee:	0f be       	out	0x3f, r0	; 63
 8f0:	0f 90       	pop	r0
 8f2:	1f 90       	pop	r1
 8f4:	18 95       	reti

000008f6 <MCAL_Global_Interrupt_Enable>:
#include "global_interrupt_config.h"
#include "global_interrupt.h"


void MCAL_Global_Interrupt_Enable(){
	SET_BIT(SREG,Global_Interrupt_BIT);
 8f6:	8f b7       	in	r24, 0x3f	; 63
 8f8:	80 68       	ori	r24, 0x80	; 128
 8fa:	8f bf       	out	0x3f, r24	; 63
 8fc:	08 95       	ret

000008fe <sprintf>:
 8fe:	ae e0       	ldi	r26, 0x0E	; 14
 900:	b0 e0       	ldi	r27, 0x00	; 0
 902:	e5 e8       	ldi	r30, 0x85	; 133
 904:	f4 e0       	ldi	r31, 0x04	; 4
 906:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__prologue_saves__+0x1c>
 90a:	0d 89       	ldd	r16, Y+21	; 0x15
 90c:	1e 89       	ldd	r17, Y+22	; 0x16
 90e:	86 e0       	ldi	r24, 0x06	; 6
 910:	8c 83       	std	Y+4, r24	; 0x04
 912:	1a 83       	std	Y+2, r17	; 0x02
 914:	09 83       	std	Y+1, r16	; 0x01
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	9f e7       	ldi	r25, 0x7F	; 127
 91a:	9e 83       	std	Y+6, r25	; 0x06
 91c:	8d 83       	std	Y+5, r24	; 0x05
 91e:	ae 01       	movw	r20, r28
 920:	47 5e       	subi	r20, 0xE7	; 231
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	6f 89       	ldd	r22, Y+23	; 0x17
 926:	78 8d       	ldd	r23, Y+24	; 0x18
 928:	ce 01       	movw	r24, r28
 92a:	01 96       	adiw	r24, 0x01	; 1
 92c:	0e 94 a1 04 	call	0x942	; 0x942 <vfprintf>
 930:	ef 81       	ldd	r30, Y+7	; 0x07
 932:	f8 85       	ldd	r31, Y+8	; 0x08
 934:	e0 0f       	add	r30, r16
 936:	f1 1f       	adc	r31, r17
 938:	10 82       	st	Z, r1
 93a:	2e 96       	adiw	r28, 0x0e	; 14
 93c:	e4 e0       	ldi	r30, 0x04	; 4
 93e:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__epilogue_restores__+0x1c>

00000942 <vfprintf>:
 942:	ab e0       	ldi	r26, 0x0B	; 11
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	e7 ea       	ldi	r30, 0xA7	; 167
 948:	f4 e0       	ldi	r31, 0x04	; 4
 94a:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__prologue_saves__>
 94e:	6c 01       	movw	r12, r24
 950:	7b 01       	movw	r14, r22
 952:	8a 01       	movw	r16, r20
 954:	fc 01       	movw	r30, r24
 956:	17 82       	std	Z+7, r1	; 0x07
 958:	16 82       	std	Z+6, r1	; 0x06
 95a:	83 81       	ldd	r24, Z+3	; 0x03
 95c:	81 ff       	sbrs	r24, 1
 95e:	cc c1       	rjmp	.+920    	; 0xcf8 <vfprintf+0x3b6>
 960:	ce 01       	movw	r24, r28
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	3c 01       	movw	r6, r24
 966:	f6 01       	movw	r30, r12
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	f7 01       	movw	r30, r14
 96c:	93 fd       	sbrc	r25, 3
 96e:	85 91       	lpm	r24, Z+
 970:	93 ff       	sbrs	r25, 3
 972:	81 91       	ld	r24, Z+
 974:	7f 01       	movw	r14, r30
 976:	88 23       	and	r24, r24
 978:	09 f4       	brne	.+2      	; 0x97c <vfprintf+0x3a>
 97a:	ba c1       	rjmp	.+884    	; 0xcf0 <vfprintf+0x3ae>
 97c:	85 32       	cpi	r24, 0x25	; 37
 97e:	39 f4       	brne	.+14     	; 0x98e <vfprintf+0x4c>
 980:	93 fd       	sbrc	r25, 3
 982:	85 91       	lpm	r24, Z+
 984:	93 ff       	sbrs	r25, 3
 986:	81 91       	ld	r24, Z+
 988:	7f 01       	movw	r14, r30
 98a:	85 32       	cpi	r24, 0x25	; 37
 98c:	29 f4       	brne	.+10     	; 0x998 <vfprintf+0x56>
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 996:	e7 cf       	rjmp	.-50     	; 0x966 <vfprintf+0x24>
 998:	91 2c       	mov	r9, r1
 99a:	21 2c       	mov	r2, r1
 99c:	31 2c       	mov	r3, r1
 99e:	ff e1       	ldi	r31, 0x1F	; 31
 9a0:	f3 15       	cp	r31, r3
 9a2:	d8 f0       	brcs	.+54     	; 0x9da <vfprintf+0x98>
 9a4:	8b 32       	cpi	r24, 0x2B	; 43
 9a6:	79 f0       	breq	.+30     	; 0x9c6 <vfprintf+0x84>
 9a8:	38 f4       	brcc	.+14     	; 0x9b8 <vfprintf+0x76>
 9aa:	80 32       	cpi	r24, 0x20	; 32
 9ac:	79 f0       	breq	.+30     	; 0x9cc <vfprintf+0x8a>
 9ae:	83 32       	cpi	r24, 0x23	; 35
 9b0:	a1 f4       	brne	.+40     	; 0x9da <vfprintf+0x98>
 9b2:	23 2d       	mov	r18, r3
 9b4:	20 61       	ori	r18, 0x10	; 16
 9b6:	1d c0       	rjmp	.+58     	; 0x9f2 <vfprintf+0xb0>
 9b8:	8d 32       	cpi	r24, 0x2D	; 45
 9ba:	61 f0       	breq	.+24     	; 0x9d4 <vfprintf+0x92>
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	69 f4       	brne	.+26     	; 0x9da <vfprintf+0x98>
 9c0:	23 2d       	mov	r18, r3
 9c2:	21 60       	ori	r18, 0x01	; 1
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <vfprintf+0xb0>
 9c6:	83 2d       	mov	r24, r3
 9c8:	82 60       	ori	r24, 0x02	; 2
 9ca:	38 2e       	mov	r3, r24
 9cc:	e3 2d       	mov	r30, r3
 9ce:	e4 60       	ori	r30, 0x04	; 4
 9d0:	3e 2e       	mov	r3, r30
 9d2:	2a c0       	rjmp	.+84     	; 0xa28 <vfprintf+0xe6>
 9d4:	f3 2d       	mov	r31, r3
 9d6:	f8 60       	ori	r31, 0x08	; 8
 9d8:	1d c0       	rjmp	.+58     	; 0xa14 <vfprintf+0xd2>
 9da:	37 fc       	sbrc	r3, 7
 9dc:	2d c0       	rjmp	.+90     	; 0xa38 <vfprintf+0xf6>
 9de:	20 ed       	ldi	r18, 0xD0	; 208
 9e0:	28 0f       	add	r18, r24
 9e2:	2a 30       	cpi	r18, 0x0A	; 10
 9e4:	40 f0       	brcs	.+16     	; 0x9f6 <vfprintf+0xb4>
 9e6:	8e 32       	cpi	r24, 0x2E	; 46
 9e8:	b9 f4       	brne	.+46     	; 0xa18 <vfprintf+0xd6>
 9ea:	36 fc       	sbrc	r3, 6
 9ec:	81 c1       	rjmp	.+770    	; 0xcf0 <vfprintf+0x3ae>
 9ee:	23 2d       	mov	r18, r3
 9f0:	20 64       	ori	r18, 0x40	; 64
 9f2:	32 2e       	mov	r3, r18
 9f4:	19 c0       	rjmp	.+50     	; 0xa28 <vfprintf+0xe6>
 9f6:	36 fe       	sbrs	r3, 6
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0xc4>
 9fa:	8a e0       	ldi	r24, 0x0A	; 10
 9fc:	98 9e       	mul	r9, r24
 9fe:	20 0d       	add	r18, r0
 a00:	11 24       	eor	r1, r1
 a02:	92 2e       	mov	r9, r18
 a04:	11 c0       	rjmp	.+34     	; 0xa28 <vfprintf+0xe6>
 a06:	ea e0       	ldi	r30, 0x0A	; 10
 a08:	2e 9e       	mul	r2, r30
 a0a:	20 0d       	add	r18, r0
 a0c:	11 24       	eor	r1, r1
 a0e:	22 2e       	mov	r2, r18
 a10:	f3 2d       	mov	r31, r3
 a12:	f0 62       	ori	r31, 0x20	; 32
 a14:	3f 2e       	mov	r3, r31
 a16:	08 c0       	rjmp	.+16     	; 0xa28 <vfprintf+0xe6>
 a18:	8c 36       	cpi	r24, 0x6C	; 108
 a1a:	21 f4       	brne	.+8      	; 0xa24 <vfprintf+0xe2>
 a1c:	83 2d       	mov	r24, r3
 a1e:	80 68       	ori	r24, 0x80	; 128
 a20:	38 2e       	mov	r3, r24
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0xe6>
 a24:	88 36       	cpi	r24, 0x68	; 104
 a26:	41 f4       	brne	.+16     	; 0xa38 <vfprintf+0xf6>
 a28:	f7 01       	movw	r30, r14
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	7f 01       	movw	r14, r30
 a34:	81 11       	cpse	r24, r1
 a36:	b3 cf       	rjmp	.-154    	; 0x99e <vfprintf+0x5c>
 a38:	98 2f       	mov	r25, r24
 a3a:	9f 7d       	andi	r25, 0xDF	; 223
 a3c:	95 54       	subi	r25, 0x45	; 69
 a3e:	93 30       	cpi	r25, 0x03	; 3
 a40:	28 f4       	brcc	.+10     	; 0xa4c <vfprintf+0x10a>
 a42:	0c 5f       	subi	r16, 0xFC	; 252
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	9f e3       	ldi	r25, 0x3F	; 63
 a48:	99 83       	std	Y+1, r25	; 0x01
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <vfprintf+0x124>
 a4c:	83 36       	cpi	r24, 0x63	; 99
 a4e:	31 f0       	breq	.+12     	; 0xa5c <vfprintf+0x11a>
 a50:	83 37       	cpi	r24, 0x73	; 115
 a52:	71 f0       	breq	.+28     	; 0xa70 <vfprintf+0x12e>
 a54:	83 35       	cpi	r24, 0x53	; 83
 a56:	09 f0       	breq	.+2      	; 0xa5a <vfprintf+0x118>
 a58:	59 c0       	rjmp	.+178    	; 0xb0c <vfprintf+0x1ca>
 a5a:	21 c0       	rjmp	.+66     	; 0xa9e <vfprintf+0x15c>
 a5c:	f8 01       	movw	r30, r16
 a5e:	80 81       	ld	r24, Z
 a60:	89 83       	std	Y+1, r24	; 0x01
 a62:	0e 5f       	subi	r16, 0xFE	; 254
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	88 24       	eor	r8, r8
 a68:	83 94       	inc	r8
 a6a:	91 2c       	mov	r9, r1
 a6c:	53 01       	movw	r10, r6
 a6e:	13 c0       	rjmp	.+38     	; 0xa96 <vfprintf+0x154>
 a70:	28 01       	movw	r4, r16
 a72:	f2 e0       	ldi	r31, 0x02	; 2
 a74:	4f 0e       	add	r4, r31
 a76:	51 1c       	adc	r5, r1
 a78:	f8 01       	movw	r30, r16
 a7a:	a0 80       	ld	r10, Z
 a7c:	b1 80       	ldd	r11, Z+1	; 0x01
 a7e:	36 fe       	sbrs	r3, 6
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <vfprintf+0x146>
 a82:	69 2d       	mov	r22, r9
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x14a>
 a88:	6f ef       	ldi	r22, 0xFF	; 255
 a8a:	7f ef       	ldi	r23, 0xFF	; 255
 a8c:	c5 01       	movw	r24, r10
 a8e:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strnlen>
 a92:	4c 01       	movw	r8, r24
 a94:	82 01       	movw	r16, r4
 a96:	f3 2d       	mov	r31, r3
 a98:	ff 77       	andi	r31, 0x7F	; 127
 a9a:	3f 2e       	mov	r3, r31
 a9c:	16 c0       	rjmp	.+44     	; 0xaca <vfprintf+0x188>
 a9e:	28 01       	movw	r4, r16
 aa0:	22 e0       	ldi	r18, 0x02	; 2
 aa2:	42 0e       	add	r4, r18
 aa4:	51 1c       	adc	r5, r1
 aa6:	f8 01       	movw	r30, r16
 aa8:	a0 80       	ld	r10, Z
 aaa:	b1 80       	ldd	r11, Z+1	; 0x01
 aac:	36 fe       	sbrs	r3, 6
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <vfprintf+0x174>
 ab0:	69 2d       	mov	r22, r9
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x178>
 ab6:	6f ef       	ldi	r22, 0xFF	; 255
 ab8:	7f ef       	ldi	r23, 0xFF	; 255
 aba:	c5 01       	movw	r24, r10
 abc:	0e 94 82 06 	call	0xd04	; 0xd04 <strnlen_P>
 ac0:	4c 01       	movw	r8, r24
 ac2:	f3 2d       	mov	r31, r3
 ac4:	f0 68       	ori	r31, 0x80	; 128
 ac6:	3f 2e       	mov	r3, r31
 ac8:	82 01       	movw	r16, r4
 aca:	33 fc       	sbrc	r3, 3
 acc:	1b c0       	rjmp	.+54     	; 0xb04 <vfprintf+0x1c2>
 ace:	82 2d       	mov	r24, r2
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	88 16       	cp	r8, r24
 ad4:	99 06       	cpc	r9, r25
 ad6:	b0 f4       	brcc	.+44     	; 0xb04 <vfprintf+0x1c2>
 ad8:	b6 01       	movw	r22, r12
 ada:	80 e2       	ldi	r24, 0x20	; 32
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 ae2:	2a 94       	dec	r2
 ae4:	f4 cf       	rjmp	.-24     	; 0xace <vfprintf+0x18c>
 ae6:	f5 01       	movw	r30, r10
 ae8:	37 fc       	sbrc	r3, 7
 aea:	85 91       	lpm	r24, Z+
 aec:	37 fe       	sbrs	r3, 7
 aee:	81 91       	ld	r24, Z+
 af0:	5f 01       	movw	r10, r30
 af2:	b6 01       	movw	r22, r12
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 afa:	21 10       	cpse	r2, r1
 afc:	2a 94       	dec	r2
 afe:	21 e0       	ldi	r18, 0x01	; 1
 b00:	82 1a       	sub	r8, r18
 b02:	91 08       	sbc	r9, r1
 b04:	81 14       	cp	r8, r1
 b06:	91 04       	cpc	r9, r1
 b08:	71 f7       	brne	.-36     	; 0xae6 <vfprintf+0x1a4>
 b0a:	e8 c0       	rjmp	.+464    	; 0xcdc <vfprintf+0x39a>
 b0c:	84 36       	cpi	r24, 0x64	; 100
 b0e:	11 f0       	breq	.+4      	; 0xb14 <vfprintf+0x1d2>
 b10:	89 36       	cpi	r24, 0x69	; 105
 b12:	41 f5       	brne	.+80     	; 0xb64 <vfprintf+0x222>
 b14:	f8 01       	movw	r30, r16
 b16:	37 fe       	sbrs	r3, 7
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <vfprintf+0x1e6>
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	82 81       	ldd	r24, Z+2	; 0x02
 b20:	93 81       	ldd	r25, Z+3	; 0x03
 b22:	0c 5f       	subi	r16, 0xFC	; 252
 b24:	1f 4f       	sbci	r17, 0xFF	; 255
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <vfprintf+0x1f6>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	07 2e       	mov	r0, r23
 b2e:	00 0c       	add	r0, r0
 b30:	88 0b       	sbc	r24, r24
 b32:	99 0b       	sbc	r25, r25
 b34:	0e 5f       	subi	r16, 0xFE	; 254
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	f3 2d       	mov	r31, r3
 b3a:	ff 76       	andi	r31, 0x6F	; 111
 b3c:	3f 2e       	mov	r3, r31
 b3e:	97 ff       	sbrs	r25, 7
 b40:	09 c0       	rjmp	.+18     	; 0xb54 <vfprintf+0x212>
 b42:	90 95       	com	r25
 b44:	80 95       	com	r24
 b46:	70 95       	com	r23
 b48:	61 95       	neg	r22
 b4a:	7f 4f       	sbci	r23, 0xFF	; 255
 b4c:	8f 4f       	sbci	r24, 0xFF	; 255
 b4e:	9f 4f       	sbci	r25, 0xFF	; 255
 b50:	f0 68       	ori	r31, 0x80	; 128
 b52:	3f 2e       	mov	r3, r31
 b54:	2a e0       	ldi	r18, 0x0A	; 10
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	a3 01       	movw	r20, r6
 b5a:	0e 94 d4 06 	call	0xda8	; 0xda8 <__ultoa_invert>
 b5e:	88 2e       	mov	r8, r24
 b60:	86 18       	sub	r8, r6
 b62:	45 c0       	rjmp	.+138    	; 0xbee <vfprintf+0x2ac>
 b64:	85 37       	cpi	r24, 0x75	; 117
 b66:	31 f4       	brne	.+12     	; 0xb74 <vfprintf+0x232>
 b68:	23 2d       	mov	r18, r3
 b6a:	2f 7e       	andi	r18, 0xEF	; 239
 b6c:	b2 2e       	mov	r11, r18
 b6e:	2a e0       	ldi	r18, 0x0A	; 10
 b70:	30 e0       	ldi	r19, 0x00	; 0
 b72:	25 c0       	rjmp	.+74     	; 0xbbe <vfprintf+0x27c>
 b74:	93 2d       	mov	r25, r3
 b76:	99 7f       	andi	r25, 0xF9	; 249
 b78:	b9 2e       	mov	r11, r25
 b7a:	8f 36       	cpi	r24, 0x6F	; 111
 b7c:	c1 f0       	breq	.+48     	; 0xbae <vfprintf+0x26c>
 b7e:	18 f4       	brcc	.+6      	; 0xb86 <vfprintf+0x244>
 b80:	88 35       	cpi	r24, 0x58	; 88
 b82:	79 f0       	breq	.+30     	; 0xba2 <vfprintf+0x260>
 b84:	b5 c0       	rjmp	.+362    	; 0xcf0 <vfprintf+0x3ae>
 b86:	80 37       	cpi	r24, 0x70	; 112
 b88:	19 f0       	breq	.+6      	; 0xb90 <vfprintf+0x24e>
 b8a:	88 37       	cpi	r24, 0x78	; 120
 b8c:	21 f0       	breq	.+8      	; 0xb96 <vfprintf+0x254>
 b8e:	b0 c0       	rjmp	.+352    	; 0xcf0 <vfprintf+0x3ae>
 b90:	e9 2f       	mov	r30, r25
 b92:	e0 61       	ori	r30, 0x10	; 16
 b94:	be 2e       	mov	r11, r30
 b96:	b4 fe       	sbrs	r11, 4
 b98:	0d c0       	rjmp	.+26     	; 0xbb4 <vfprintf+0x272>
 b9a:	fb 2d       	mov	r31, r11
 b9c:	f4 60       	ori	r31, 0x04	; 4
 b9e:	bf 2e       	mov	r11, r31
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <vfprintf+0x272>
 ba2:	34 fe       	sbrs	r3, 4
 ba4:	0a c0       	rjmp	.+20     	; 0xbba <vfprintf+0x278>
 ba6:	29 2f       	mov	r18, r25
 ba8:	26 60       	ori	r18, 0x06	; 6
 baa:	b2 2e       	mov	r11, r18
 bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0x278>
 bae:	28 e0       	ldi	r18, 0x08	; 8
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	05 c0       	rjmp	.+10     	; 0xbbe <vfprintf+0x27c>
 bb4:	20 e1       	ldi	r18, 0x10	; 16
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x27c>
 bba:	20 e1       	ldi	r18, 0x10	; 16
 bbc:	32 e0       	ldi	r19, 0x02	; 2
 bbe:	f8 01       	movw	r30, r16
 bc0:	b7 fe       	sbrs	r11, 7
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <vfprintf+0x290>
 bc4:	60 81       	ld	r22, Z
 bc6:	71 81       	ldd	r23, Z+1	; 0x01
 bc8:	82 81       	ldd	r24, Z+2	; 0x02
 bca:	93 81       	ldd	r25, Z+3	; 0x03
 bcc:	0c 5f       	subi	r16, 0xFC	; 252
 bce:	1f 4f       	sbci	r17, 0xFF	; 255
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x29c>
 bd2:	60 81       	ld	r22, Z
 bd4:	71 81       	ldd	r23, Z+1	; 0x01
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 5f       	subi	r16, 0xFE	; 254
 bdc:	1f 4f       	sbci	r17, 0xFF	; 255
 bde:	a3 01       	movw	r20, r6
 be0:	0e 94 d4 06 	call	0xda8	; 0xda8 <__ultoa_invert>
 be4:	88 2e       	mov	r8, r24
 be6:	86 18       	sub	r8, r6
 be8:	fb 2d       	mov	r31, r11
 bea:	ff 77       	andi	r31, 0x7F	; 127
 bec:	3f 2e       	mov	r3, r31
 bee:	36 fe       	sbrs	r3, 6
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x2ca>
 bf2:	23 2d       	mov	r18, r3
 bf4:	2e 7f       	andi	r18, 0xFE	; 254
 bf6:	a2 2e       	mov	r10, r18
 bf8:	89 14       	cp	r8, r9
 bfa:	58 f4       	brcc	.+22     	; 0xc12 <vfprintf+0x2d0>
 bfc:	34 fe       	sbrs	r3, 4
 bfe:	0b c0       	rjmp	.+22     	; 0xc16 <vfprintf+0x2d4>
 c00:	32 fc       	sbrc	r3, 2
 c02:	09 c0       	rjmp	.+18     	; 0xc16 <vfprintf+0x2d4>
 c04:	83 2d       	mov	r24, r3
 c06:	8e 7e       	andi	r24, 0xEE	; 238
 c08:	a8 2e       	mov	r10, r24
 c0a:	05 c0       	rjmp	.+10     	; 0xc16 <vfprintf+0x2d4>
 c0c:	b8 2c       	mov	r11, r8
 c0e:	a3 2c       	mov	r10, r3
 c10:	03 c0       	rjmp	.+6      	; 0xc18 <vfprintf+0x2d6>
 c12:	b8 2c       	mov	r11, r8
 c14:	01 c0       	rjmp	.+2      	; 0xc18 <vfprintf+0x2d6>
 c16:	b9 2c       	mov	r11, r9
 c18:	a4 fe       	sbrs	r10, 4
 c1a:	0f c0       	rjmp	.+30     	; 0xc3a <vfprintf+0x2f8>
 c1c:	fe 01       	movw	r30, r28
 c1e:	e8 0d       	add	r30, r8
 c20:	f1 1d       	adc	r31, r1
 c22:	80 81       	ld	r24, Z
 c24:	80 33       	cpi	r24, 0x30	; 48
 c26:	21 f4       	brne	.+8      	; 0xc30 <vfprintf+0x2ee>
 c28:	9a 2d       	mov	r25, r10
 c2a:	99 7e       	andi	r25, 0xE9	; 233
 c2c:	a9 2e       	mov	r10, r25
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x300>
 c30:	a2 fe       	sbrs	r10, 2
 c32:	06 c0       	rjmp	.+12     	; 0xc40 <vfprintf+0x2fe>
 c34:	b3 94       	inc	r11
 c36:	b3 94       	inc	r11
 c38:	04 c0       	rjmp	.+8      	; 0xc42 <vfprintf+0x300>
 c3a:	8a 2d       	mov	r24, r10
 c3c:	86 78       	andi	r24, 0x86	; 134
 c3e:	09 f0       	breq	.+2      	; 0xc42 <vfprintf+0x300>
 c40:	b3 94       	inc	r11
 c42:	a3 fc       	sbrc	r10, 3
 c44:	11 c0       	rjmp	.+34     	; 0xc68 <vfprintf+0x326>
 c46:	a0 fe       	sbrs	r10, 0
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x314>
 c4a:	b2 14       	cp	r11, r2
 c4c:	88 f4       	brcc	.+34     	; 0xc70 <vfprintf+0x32e>
 c4e:	28 0c       	add	r2, r8
 c50:	92 2c       	mov	r9, r2
 c52:	9b 18       	sub	r9, r11
 c54:	0e c0       	rjmp	.+28     	; 0xc72 <vfprintf+0x330>
 c56:	b2 14       	cp	r11, r2
 c58:	60 f4       	brcc	.+24     	; 0xc72 <vfprintf+0x330>
 c5a:	b6 01       	movw	r22, r12
 c5c:	80 e2       	ldi	r24, 0x20	; 32
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 c64:	b3 94       	inc	r11
 c66:	f7 cf       	rjmp	.-18     	; 0xc56 <vfprintf+0x314>
 c68:	b2 14       	cp	r11, r2
 c6a:	18 f4       	brcc	.+6      	; 0xc72 <vfprintf+0x330>
 c6c:	2b 18       	sub	r2, r11
 c6e:	02 c0       	rjmp	.+4      	; 0xc74 <vfprintf+0x332>
 c70:	98 2c       	mov	r9, r8
 c72:	21 2c       	mov	r2, r1
 c74:	a4 fe       	sbrs	r10, 4
 c76:	10 c0       	rjmp	.+32     	; 0xc98 <vfprintf+0x356>
 c78:	b6 01       	movw	r22, r12
 c7a:	80 e3       	ldi	r24, 0x30	; 48
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 c82:	a2 fe       	sbrs	r10, 2
 c84:	17 c0       	rjmp	.+46     	; 0xcb4 <vfprintf+0x372>
 c86:	a1 fc       	sbrc	r10, 1
 c88:	03 c0       	rjmp	.+6      	; 0xc90 <vfprintf+0x34e>
 c8a:	88 e7       	ldi	r24, 0x78	; 120
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x352>
 c90:	88 e5       	ldi	r24, 0x58	; 88
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	b6 01       	movw	r22, r12
 c96:	0c c0       	rjmp	.+24     	; 0xcb0 <vfprintf+0x36e>
 c98:	8a 2d       	mov	r24, r10
 c9a:	86 78       	andi	r24, 0x86	; 134
 c9c:	59 f0       	breq	.+22     	; 0xcb4 <vfprintf+0x372>
 c9e:	a1 fe       	sbrs	r10, 1
 ca0:	02 c0       	rjmp	.+4      	; 0xca6 <vfprintf+0x364>
 ca2:	8b e2       	ldi	r24, 0x2B	; 43
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <vfprintf+0x366>
 ca6:	80 e2       	ldi	r24, 0x20	; 32
 ca8:	a7 fc       	sbrc	r10, 7
 caa:	8d e2       	ldi	r24, 0x2D	; 45
 cac:	b6 01       	movw	r22, r12
 cae:	90 e0       	ldi	r25, 0x00	; 0
 cb0:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 cb4:	89 14       	cp	r8, r9
 cb6:	38 f4       	brcc	.+14     	; 0xcc6 <vfprintf+0x384>
 cb8:	b6 01       	movw	r22, r12
 cba:	80 e3       	ldi	r24, 0x30	; 48
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 cc2:	9a 94       	dec	r9
 cc4:	f7 cf       	rjmp	.-18     	; 0xcb4 <vfprintf+0x372>
 cc6:	8a 94       	dec	r8
 cc8:	f3 01       	movw	r30, r6
 cca:	e8 0d       	add	r30, r8
 ccc:	f1 1d       	adc	r31, r1
 cce:	80 81       	ld	r24, Z
 cd0:	b6 01       	movw	r22, r12
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 cd8:	81 10       	cpse	r8, r1
 cda:	f5 cf       	rjmp	.-22     	; 0xcc6 <vfprintf+0x384>
 cdc:	22 20       	and	r2, r2
 cde:	09 f4       	brne	.+2      	; 0xce2 <vfprintf+0x3a0>
 ce0:	42 ce       	rjmp	.-892    	; 0x966 <vfprintf+0x24>
 ce2:	b6 01       	movw	r22, r12
 ce4:	80 e2       	ldi	r24, 0x20	; 32
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	0e 94 98 06 	call	0xd30	; 0xd30 <fputc>
 cec:	2a 94       	dec	r2
 cee:	f6 cf       	rjmp	.-20     	; 0xcdc <vfprintf+0x39a>
 cf0:	f6 01       	movw	r30, r12
 cf2:	86 81       	ldd	r24, Z+6	; 0x06
 cf4:	97 81       	ldd	r25, Z+7	; 0x07
 cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x3ba>
 cf8:	8f ef       	ldi	r24, 0xFF	; 255
 cfa:	9f ef       	ldi	r25, 0xFF	; 255
 cfc:	2b 96       	adiw	r28, 0x0b	; 11
 cfe:	e2 e1       	ldi	r30, 0x12	; 18
 d00:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__epilogue_restores__>

00000d04 <strnlen_P>:
 d04:	fc 01       	movw	r30, r24
 d06:	05 90       	lpm	r0, Z+
 d08:	61 50       	subi	r22, 0x01	; 1
 d0a:	70 40       	sbci	r23, 0x00	; 0
 d0c:	01 10       	cpse	r0, r1
 d0e:	d8 f7       	brcc	.-10     	; 0xd06 <strnlen_P+0x2>
 d10:	80 95       	com	r24
 d12:	90 95       	com	r25
 d14:	8e 0f       	add	r24, r30
 d16:	9f 1f       	adc	r25, r31
 d18:	08 95       	ret

00000d1a <strnlen>:
 d1a:	fc 01       	movw	r30, r24
 d1c:	61 50       	subi	r22, 0x01	; 1
 d1e:	70 40       	sbci	r23, 0x00	; 0
 d20:	01 90       	ld	r0, Z+
 d22:	01 10       	cpse	r0, r1
 d24:	d8 f7       	brcc	.-10     	; 0xd1c <strnlen+0x2>
 d26:	80 95       	com	r24
 d28:	90 95       	com	r25
 d2a:	8e 0f       	add	r24, r30
 d2c:	9f 1f       	adc	r25, r31
 d2e:	08 95       	ret

00000d30 <fputc>:
 d30:	0f 93       	push	r16
 d32:	1f 93       	push	r17
 d34:	cf 93       	push	r28
 d36:	df 93       	push	r29
 d38:	fb 01       	movw	r30, r22
 d3a:	23 81       	ldd	r18, Z+3	; 0x03
 d3c:	21 fd       	sbrc	r18, 1
 d3e:	03 c0       	rjmp	.+6      	; 0xd46 <fputc+0x16>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	2c c0       	rjmp	.+88     	; 0xd9e <fputc+0x6e>
 d46:	22 ff       	sbrs	r18, 2
 d48:	16 c0       	rjmp	.+44     	; 0xd76 <fputc+0x46>
 d4a:	46 81       	ldd	r20, Z+6	; 0x06
 d4c:	57 81       	ldd	r21, Z+7	; 0x07
 d4e:	24 81       	ldd	r18, Z+4	; 0x04
 d50:	35 81       	ldd	r19, Z+5	; 0x05
 d52:	42 17       	cp	r20, r18
 d54:	53 07       	cpc	r21, r19
 d56:	44 f4       	brge	.+16     	; 0xd68 <fputc+0x38>
 d58:	a0 81       	ld	r26, Z
 d5a:	b1 81       	ldd	r27, Z+1	; 0x01
 d5c:	9d 01       	movw	r18, r26
 d5e:	2f 5f       	subi	r18, 0xFF	; 255
 d60:	3f 4f       	sbci	r19, 0xFF	; 255
 d62:	31 83       	std	Z+1, r19	; 0x01
 d64:	20 83       	st	Z, r18
 d66:	8c 93       	st	X, r24
 d68:	26 81       	ldd	r18, Z+6	; 0x06
 d6a:	37 81       	ldd	r19, Z+7	; 0x07
 d6c:	2f 5f       	subi	r18, 0xFF	; 255
 d6e:	3f 4f       	sbci	r19, 0xFF	; 255
 d70:	37 83       	std	Z+7, r19	; 0x07
 d72:	26 83       	std	Z+6, r18	; 0x06
 d74:	14 c0       	rjmp	.+40     	; 0xd9e <fputc+0x6e>
 d76:	8b 01       	movw	r16, r22
 d78:	ec 01       	movw	r28, r24
 d7a:	fb 01       	movw	r30, r22
 d7c:	00 84       	ldd	r0, Z+8	; 0x08
 d7e:	f1 85       	ldd	r31, Z+9	; 0x09
 d80:	e0 2d       	mov	r30, r0
 d82:	09 95       	icall
 d84:	89 2b       	or	r24, r25
 d86:	e1 f6       	brne	.-72     	; 0xd40 <fputc+0x10>
 d88:	d8 01       	movw	r26, r16
 d8a:	16 96       	adiw	r26, 0x06	; 6
 d8c:	8d 91       	ld	r24, X+
 d8e:	9c 91       	ld	r25, X
 d90:	17 97       	sbiw	r26, 0x07	; 7
 d92:	01 96       	adiw	r24, 0x01	; 1
 d94:	17 96       	adiw	r26, 0x07	; 7
 d96:	9c 93       	st	X, r25
 d98:	8e 93       	st	-X, r24
 d9a:	16 97       	sbiw	r26, 0x06	; 6
 d9c:	ce 01       	movw	r24, r28
 d9e:	df 91       	pop	r29
 da0:	cf 91       	pop	r28
 da2:	1f 91       	pop	r17
 da4:	0f 91       	pop	r16
 da6:	08 95       	ret

00000da8 <__ultoa_invert>:
 da8:	fa 01       	movw	r30, r20
 daa:	aa 27       	eor	r26, r26
 dac:	28 30       	cpi	r18, 0x08	; 8
 dae:	51 f1       	breq	.+84     	; 0xe04 <__ultoa_invert+0x5c>
 db0:	20 31       	cpi	r18, 0x10	; 16
 db2:	81 f1       	breq	.+96     	; 0xe14 <__ultoa_invert+0x6c>
 db4:	e8 94       	clt
 db6:	6f 93       	push	r22
 db8:	6e 7f       	andi	r22, 0xFE	; 254
 dba:	6e 5f       	subi	r22, 0xFE	; 254
 dbc:	7f 4f       	sbci	r23, 0xFF	; 255
 dbe:	8f 4f       	sbci	r24, 0xFF	; 255
 dc0:	9f 4f       	sbci	r25, 0xFF	; 255
 dc2:	af 4f       	sbci	r26, 0xFF	; 255
 dc4:	b1 e0       	ldi	r27, 0x01	; 1
 dc6:	3e d0       	rcall	.+124    	; 0xe44 <__ultoa_invert+0x9c>
 dc8:	b4 e0       	ldi	r27, 0x04	; 4
 dca:	3c d0       	rcall	.+120    	; 0xe44 <__ultoa_invert+0x9c>
 dcc:	67 0f       	add	r22, r23
 dce:	78 1f       	adc	r23, r24
 dd0:	89 1f       	adc	r24, r25
 dd2:	9a 1f       	adc	r25, r26
 dd4:	a1 1d       	adc	r26, r1
 dd6:	68 0f       	add	r22, r24
 dd8:	79 1f       	adc	r23, r25
 dda:	8a 1f       	adc	r24, r26
 ddc:	91 1d       	adc	r25, r1
 dde:	a1 1d       	adc	r26, r1
 de0:	6a 0f       	add	r22, r26
 de2:	71 1d       	adc	r23, r1
 de4:	81 1d       	adc	r24, r1
 de6:	91 1d       	adc	r25, r1
 de8:	a1 1d       	adc	r26, r1
 dea:	20 d0       	rcall	.+64     	; 0xe2c <__ultoa_invert+0x84>
 dec:	09 f4       	brne	.+2      	; 0xdf0 <__ultoa_invert+0x48>
 dee:	68 94       	set
 df0:	3f 91       	pop	r19
 df2:	2a e0       	ldi	r18, 0x0A	; 10
 df4:	26 9f       	mul	r18, r22
 df6:	11 24       	eor	r1, r1
 df8:	30 19       	sub	r19, r0
 dfa:	30 5d       	subi	r19, 0xD0	; 208
 dfc:	31 93       	st	Z+, r19
 dfe:	de f6       	brtc	.-74     	; 0xdb6 <__ultoa_invert+0xe>
 e00:	cf 01       	movw	r24, r30
 e02:	08 95       	ret
 e04:	46 2f       	mov	r20, r22
 e06:	47 70       	andi	r20, 0x07	; 7
 e08:	40 5d       	subi	r20, 0xD0	; 208
 e0a:	41 93       	st	Z+, r20
 e0c:	b3 e0       	ldi	r27, 0x03	; 3
 e0e:	0f d0       	rcall	.+30     	; 0xe2e <__ultoa_invert+0x86>
 e10:	c9 f7       	brne	.-14     	; 0xe04 <__ultoa_invert+0x5c>
 e12:	f6 cf       	rjmp	.-20     	; 0xe00 <__ultoa_invert+0x58>
 e14:	46 2f       	mov	r20, r22
 e16:	4f 70       	andi	r20, 0x0F	; 15
 e18:	40 5d       	subi	r20, 0xD0	; 208
 e1a:	4a 33       	cpi	r20, 0x3A	; 58
 e1c:	18 f0       	brcs	.+6      	; 0xe24 <__ultoa_invert+0x7c>
 e1e:	49 5d       	subi	r20, 0xD9	; 217
 e20:	31 fd       	sbrc	r19, 1
 e22:	40 52       	subi	r20, 0x20	; 32
 e24:	41 93       	st	Z+, r20
 e26:	02 d0       	rcall	.+4      	; 0xe2c <__ultoa_invert+0x84>
 e28:	a9 f7       	brne	.-22     	; 0xe14 <__ultoa_invert+0x6c>
 e2a:	ea cf       	rjmp	.-44     	; 0xe00 <__ultoa_invert+0x58>
 e2c:	b4 e0       	ldi	r27, 0x04	; 4
 e2e:	a6 95       	lsr	r26
 e30:	97 95       	ror	r25
 e32:	87 95       	ror	r24
 e34:	77 95       	ror	r23
 e36:	67 95       	ror	r22
 e38:	ba 95       	dec	r27
 e3a:	c9 f7       	brne	.-14     	; 0xe2e <__ultoa_invert+0x86>
 e3c:	00 97       	sbiw	r24, 0x00	; 0
 e3e:	61 05       	cpc	r22, r1
 e40:	71 05       	cpc	r23, r1
 e42:	08 95       	ret
 e44:	9b 01       	movw	r18, r22
 e46:	ac 01       	movw	r20, r24
 e48:	0a 2e       	mov	r0, r26
 e4a:	06 94       	lsr	r0
 e4c:	57 95       	ror	r21
 e4e:	47 95       	ror	r20
 e50:	37 95       	ror	r19
 e52:	27 95       	ror	r18
 e54:	ba 95       	dec	r27
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0xa2>
 e58:	62 0f       	add	r22, r18
 e5a:	73 1f       	adc	r23, r19
 e5c:	84 1f       	adc	r24, r20
 e5e:	95 1f       	adc	r25, r21
 e60:	a0 1d       	adc	r26, r0
 e62:	08 95       	ret

00000e64 <__prologue_saves__>:
 e64:	2f 92       	push	r2
 e66:	3f 92       	push	r3
 e68:	4f 92       	push	r4
 e6a:	5f 92       	push	r5
 e6c:	6f 92       	push	r6
 e6e:	7f 92       	push	r7
 e70:	8f 92       	push	r8
 e72:	9f 92       	push	r9
 e74:	af 92       	push	r10
 e76:	bf 92       	push	r11
 e78:	cf 92       	push	r12
 e7a:	df 92       	push	r13
 e7c:	ef 92       	push	r14
 e7e:	ff 92       	push	r15
 e80:	0f 93       	push	r16
 e82:	1f 93       	push	r17
 e84:	cf 93       	push	r28
 e86:	df 93       	push	r29
 e88:	cd b7       	in	r28, 0x3d	; 61
 e8a:	de b7       	in	r29, 0x3e	; 62
 e8c:	ca 1b       	sub	r28, r26
 e8e:	db 0b       	sbc	r29, r27
 e90:	0f b6       	in	r0, 0x3f	; 63
 e92:	f8 94       	cli
 e94:	de bf       	out	0x3e, r29	; 62
 e96:	0f be       	out	0x3f, r0	; 63
 e98:	cd bf       	out	0x3d, r28	; 61
 e9a:	09 94       	ijmp

00000e9c <__epilogue_restores__>:
 e9c:	2a 88       	ldd	r2, Y+18	; 0x12
 e9e:	39 88       	ldd	r3, Y+17	; 0x11
 ea0:	48 88       	ldd	r4, Y+16	; 0x10
 ea2:	5f 84       	ldd	r5, Y+15	; 0x0f
 ea4:	6e 84       	ldd	r6, Y+14	; 0x0e
 ea6:	7d 84       	ldd	r7, Y+13	; 0x0d
 ea8:	8c 84       	ldd	r8, Y+12	; 0x0c
 eaa:	9b 84       	ldd	r9, Y+11	; 0x0b
 eac:	aa 84       	ldd	r10, Y+10	; 0x0a
 eae:	b9 84       	ldd	r11, Y+9	; 0x09
 eb0:	c8 84       	ldd	r12, Y+8	; 0x08
 eb2:	df 80       	ldd	r13, Y+7	; 0x07
 eb4:	ee 80       	ldd	r14, Y+6	; 0x06
 eb6:	fd 80       	ldd	r15, Y+5	; 0x05
 eb8:	0c 81       	ldd	r16, Y+4	; 0x04
 eba:	1b 81       	ldd	r17, Y+3	; 0x03
 ebc:	aa 81       	ldd	r26, Y+2	; 0x02
 ebe:	b9 81       	ldd	r27, Y+1	; 0x01
 ec0:	ce 0f       	add	r28, r30
 ec2:	d1 1d       	adc	r29, r1
 ec4:	0f b6       	in	r0, 0x3f	; 63
 ec6:	f8 94       	cli
 ec8:	de bf       	out	0x3e, r29	; 62
 eca:	0f be       	out	0x3f, r0	; 63
 ecc:	cd bf       	out	0x3d, r28	; 61
 ece:	ed 01       	movw	r28, r26
 ed0:	08 95       	ret

00000ed2 <_exit>:
 ed2:	f8 94       	cli

00000ed4 <__stop_program>:
 ed4:	ff cf       	rjmp	.-2      	; 0xed4 <__stop_program>
